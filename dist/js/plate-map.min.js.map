{"version":3,"sources":["add-data-on-change.js","add-data-to-tabs.js","add-tab-data.js","add-warning-msg.js","bottom-table.js","check-box.js","color-manager.js","create-field.js","engine.js","image_assets.js","interface.js","load-plate.js","overlay.js","plate-map.js","preset.js","svg-create.js","svg-events.js","tabs.js","undo-redo-manager.js"],"names":["plateMapWidget","$","addDataOnChange","_addAllData","data","this","selectedIndices","noOfSelectedObjects","length","forEach","index","well","engine","derivative","extend","defaultWell","processWellData","wellEmpty","disableAddDeleteWell","hasOwnProperty","emptyWellWithDefaultVal","decideSelectedFields","_colorMixer","derivativeChange","addToUndoRedo","newData","curWell","id","newVal","multi","preData","_getMultiData","JSON","parse","stringify","curData","fieldId","addNew","added","removed","value","multiplexId","toString","doAll","add","map","val","subFieldId","push","indexOf","removeIndex","removeListIndex","newPreData","idx","parseInt","listIdx","searchAndStack","applyColors","_trigger","createState","checkboxes","getCheckboxes","slice","requiredField","getPlate","wells","address","indexToAddress","selectedAddresses","getSelectedAddresses","jQuery","addDataToFields","_addDataToTabFields","i","fieldList","field","v","undefined","setValue","addTabData","fieldMap","autoId","_addTabData","tabData","options","attributes","tabs","that","multiplexFieldArray","tab","tabPointer","tabFields","fieldArray","console","log","type","_makeMultiplexField","_makeRegularField","allDataTabs","multipleFieldList","_makeSubField","mainField","wrapperDiv","_createElement","addClass","wrapperDivLeftSide","wrapperDivRightSide","nameContainer","text","name","fieldContainer","append","full_id","root","required","checkbox","_addCheckBox","_createField","onChange","getValue","subFieldList","requiredSubField","multiplexFields","subFieldData","subField","subFields","subfield","mainMultiplexField","mainRefField","curId","singleSelectValue","curVal","returnVal","_changeMultiFieldValue","curDataLs","detailData","addWarningMsg","fieldWarningMsg","include","imgId","img","html","_assets","warningImg","attr","find","prepend","popText","hover","style","display","hide","remove","removeWarningMsg","applyFieldWarning","fieldData","_loop","applyMultiplexSubFieldColor","Array","bottomTable","_bottomScreen","bottomContainer","bottomTableContainer","bottomTableHead","bottomTableBody","container","addBottomTableHeadings","row","singleField","rowCounter","globalSelectedAttributes","empty","adjustFieldWidth","tileAttrText","tile","getText","addBottomTableRow","color","singleStack","modelTile","allTiles","plateIdDiv","numberText","click","evt","addressToSelect","ctrlKey","setSelectedAddresses","colorPairs","colorStops","css","dataDiv","bottomForFirstTime","createExportButton","downloadCSV","csv","filename","csvFile","downloadLink","Blob","document","createElement","download","href","window","URL","createObjectURL","body","appendChild","exportData","format","rows","querySelectorAll","colorLocMap","colorLocIdxMap","stackUpWithColor","colorIdx","cols","j","innerText","replace","loc","join","overlayContainer","descriptionDiv","buttonContainer","exportButton","resetExportText","classList","setTimeout","clipboardButton","clipboard","ClipboardJS","get","resetClipboardText","on","checkBox","globalSelectedMultiplexSubfield","allCheckboxes","checkImage","dontImg","linkedFieldId","_applyCheckboxHandler","checkBoxImage","changes","changeCheckboxes","filter","changeSubFieldsCheckboxes","subFieldToInclude","clicked","Boolean","doImg","noUndoRedo","gsa","multiplexCheckedSubField","_clearPresetSelection","setSubFieldCheckboxes","fieldIds","setCheckboxes","colorManager","select2close","ev","params","args","originalEvent","stopPropagation","one","preventDefault","select2fix","input","select2setData","selected","dataAdapter","addOptions","convertToOptions","createField","_createTextField","_handleFieldUnits","_createNumericField","_createSelectField","_createMultiSelectField","_createBooleanField","_createMultiplexField","units","defaultUnit","hasUnits","_makeFieldUnits","unitInput","disabledRegular","disabled","parseRegularValue","parseValue","setRegularValue","getRegularValue","getRegularText","unitText","opts","unit","allowClear","minimumResultsForSearch","select2","bool","prop","isPlainObject","parseUnit","getUnit","hasMultiplexUnit","unitMap","_loop2","unitTypeKey","setUnit","setUnitOpts","newUnits","curUnit","cleanUnit","toLowerCase","trigger","_typeof","u","parseText","String","trim","isDisabled","_createOpts","config","placeholder","data_specified","ajax","optMap","opt","multiple","_parseOne","_parseMany","vals","multiOnChange","e","_createDeleteButton","isNaN","removeClass","nameContainer1","fieldContainer1","singleSelect","appendTo","multiselectSetValue","setSingleSelectOptions","allSelectedMultipleVal","count","Object","values","reduce","a","b","concat","forAll","singleSelectChange","updateSubFieldUnitOpts","curSubField","allSelectedMultipleData","readOnlyHandler","newSubFieldValue","multiselectValues","newOptions","valMap","_loop3","curOpts","unitOptions","curIds","curOpt","newMultiplexVal","selectList","selectedVal","selectVal","checkedSubfields","_loop4","valIdx","subV","subText","optId","x","_loop5","checkMultiplexCompletion","valList","valCount","completionPct","getSubfieldStatus","req","fill","subFieldWarningMap","warningStatus","multiplexVals","multiplexIdx","updateSubFieldWarningMap","mainFieldStatus","warningText","mainFieldWarning","parseMainFieldVal","_deleteDialog","valToRemove","keys","dialogDiv","killDialog","dialogContent","tableArea","buttonRow","table","_deleteDialogTable","readOnly","deleteCheckedButton","each","cancelButton","show","onclick","event","target","colName","thead","tbody","tr","deleteButton","THIS","colorMap","Map","stackPointer","isArray","derivativeJson","wellData","selectedSubFields","_loop6","curMultiplexVals","isEmptyObject","parseFloat","sort","refDerivativeIndex","referenceDerivative","arr","wholeNoTiles","wholePercentage","setTileVisible","set","setTileColor","completion","checkCompletion","setTileComplete","Math","floor","overLayTextContainer","selectObjectInBottomTab","multiplexStatus","assets","_createInterface","topSection","topLeft","topRight","overLayContainer","canvasContainer","_createOverLay","element","_createSvg","_createTabAtRight","_createTabs","_placePresetTabs","_setShortcuts","keyup","_handleShortcuts","_configureUndoRedoArray","addEventListener","activeElement","copyCriteria","clearCriteria","pasteCriteria","keyCode","metaKey","shiftKey","redo","undo","loadPlate","addressToIndex","sanitizeWell","sanitized","sanitizeCheckboxes","setData","sanitizeAddresses","indices","newWell","quiet","setSelectedIndices","overlay","overLayButtonContainer","clearCriteriaButton","copyCriteriaButton","pasteCriteriaButton","undoButton","redoButton","hasWellUpdate","alert","_getSelectedWells","commonData","_getCommonData","widget","addressToLoc","m","exec","toUpperCase","row_v","col","c","charCodeAt","r","locToIndex","dimensions","_rowKey","c1","c2","code","fromCharCode","_colKey","indexToLoc","locToAddress","getDimensions","_create","numRows","numCols","rowIndex","component","className","isReadOnly","_init","getTextDerivative","wellsData","textDerivative","textValWell","textFieldIdWell","curWellData","textVal","textFieldVal","getWellsDifferences","wellsHash","wellId","differentWellsVals","commonWell","_getCommonWell","allFieldVal","fieldIdx","diffWellVal","commonVal","curMultiVal","containsObject","setFieldsDisabled","flag","isDisableAddDeleteWell","emptyDefaultWell","key","addressAllowToEdit","getWellSetAddressWithData","actionPointer","undoRedoArray","colors","trs","td","children","isSelected","Number","querySelector","innerHTML","toggle","getSelectedIndices","addresses","setSelection","selectedAddress","preset","presets","_this","wellAttrContainer","tabContainer","presetTabContainer","_loop7","divText","title","presetButton","fields","_selectPreset","SVG","svgCreate","baseSizes","spacing","tile_radius","center_radius_complete","center_radius_incomplete","label_size","label_spacing","text_size","stroke","gap","svg","ls","viewbox","wellShadow","gradient","stop","at","from","to","radius","wellColors","pair","_fixRowAndColumn","_putCircles","_svgEvents","rh","nested","ch","y","plain","_createTile","g","move","d","rect","circle","center","tf","group","complete","visible","colorIndex","label","svgEvents","colorToIndex","selectionBox","getMousePosition","CTM","node","getScreenCTM","clientX","clientY","f","dimCoord","max","trunc","posToLoc","pos","s","selectionBoxPosition","pos0","pos1","d0","d1","x0","min","y0","width","height","endDrag","secondary","extending","startIdx","c0","r0","r1","selectTiles","attrs","_setSelectedTiles","blur","obj","list","deepEqual","_buildCommonData","objVal","commonArr","v2","oField","inArray","_getAllMultipleVal","multiplexField","curMultipleVal","multiData","wellFieldVals","multipleVal","allTabs","tabHead","tabIndex","_tabClickHandler","tabDataContainer","_addDataTabs","clickedTab","selectedTab","previouslyClickedTabIndex","clickedTabIndex","undoRedoManager","state","splice","clearHistory","shiftUndoRedo","pointerDiff","pointer","setUndoRedo"],"mappings":"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","file":"plate-map.min.js","sourcesContent":["var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.addDataOnChange = function() {\n    // This object is invoked when something in the tab fields change\n    return {\n\n      _addAllData: function(data) {\n        if (this.selectedIndices) {\n          let noOfSelectedObjects = this.selectedIndices.length;\n          this.selectedIndices.forEach(function (index) {\n            let well;\n            if (index in this.engine.derivative) {\n              well = this.engine.derivative[index];\n            } else {\n              well = $.extend(true, {}, this.defaultWell);\n              this.engine.derivative[index] = well;\n            }\n            well = this.processWellData(data, well, noOfSelectedObjects);\n            let empty = this.engine.wellEmpty(well);\n            if (empty) {\n              if (this.disableAddDeleteWell) {\n                if (this.engine.derivative.hasOwnProperty(index)) {\n                  well = $.extend(true, {}, this.emptyWellWithDefaultVal);\n                  this.engine.derivative[index] = well;\n                }\n              } else {\n                delete this.engine.derivative[index];\n              }\n            }\n          }, this);\n        }\n        // update multiplex\n        this.decideSelectedFields();\n        // create well when default field is sent for the cases when user delete all fields during disabledNewDeleteWell mode\n        this._colorMixer();\n        this.derivativeChange();\n        this.addToUndoRedo();\n      },\n\n      processWellData: function(newData, curWell, noOfSelectedObjects) {\n        for (let id in newData) {\n          if (!newData.hasOwnProperty(id)) {\n            continue;\n          }\n          let newVal = newData[id];\n          if (newVal !== undefined && newVal !== null) {\n            if (newVal.multi) {\n              let preData = curWell[id];\n              newVal = this._getMultiData(preData, newVal, id, noOfSelectedObjects);\n            }\n            newVal = JSON.parse(JSON.stringify(newVal));\n          } else {\n            newVal = null;\n          }\n          curWell[id] = newVal;\n        }\n\n        return curWell\n      },\n\n      _getMultiData: function(preData, curData, fieldId, noOfSelectedObjects) {\n        let addNew = curData.added;\n        let removed = curData.removed;\n        preData = preData || [];\n        if (addNew) {\n          if (addNew.value) {\n            const multiplexId = addNew.id.toString();\n            const doAll = multiplexId === '[ALL]';\n            let add = !doAll;\n            preData = preData.map(function(val) {\n              if (doAll || val[fieldId].toString() === multiplexId) {\n                add = false;\n                for (let subFieldId in addNew.value) {\n                  if (subFieldId !== fieldId) {\n                    val[subFieldId] = addNew.value[subFieldId];\n                  }\n                }\n                return val;\n              }\n              return val;\n            });\n            if (add) {\n              preData.push(addNew.value);\n            }\n          } else if (preData.indexOf(addNew) < 0) {\n            preData.push(addNew);\n          }\n        }\n\n        let removeListIndex = function(preData, removeIndex) {\n          let newPreData = [];\n          for (let idx in preData) {\n            if (!preData.hasOwnProperty(idx)) {\n              continue;\n            }\n            if (parseInt(idx) !== parseInt(removeIndex)) {\n              newPreData.push(preData[idx]);\n            }\n          }\n          return newPreData;\n        };\n\n        if (removed) {\n          let removeIndex;\n          // for multiplex field\n          if (removed.value) {\n            for (let listIdx in preData) {\n              let multiplexData = preData[listIdx];\n              if (multiplexData[fieldId].toString() === removed.id.toString()) {\n                removeIndex = listIdx;\n              }\n            }\n            // remove nested element\n            preData = removeListIndex(preData, removeIndex);\n          } else {\n            if (preData) {\n              removeIndex = preData.indexOf(removed);\n              if (removeIndex >= 0) {\n                preData = removeListIndex(preData, removeIndex);\n              }\n            }\n          }\n        }\n        if (preData && (preData.length === 0)) {\n          preData = null;\n        }\n        return preData\n      },\n\n      _colorMixer: function() {\n        this.engine.searchAndStack();\n        this.engine.applyColors();\n      },\n\n      derivativeChange: function() {\n        this._trigger(\"updateWells\", null, this);\n      },\n\n      createState: function() {\n        let derivative = $.extend(true, {}, this.engine.derivative);\n        let checkboxes = this.getCheckboxes();\n        let selectedIndices = this.selectedIndices.slice();\n\n        return {\n          \"derivative\": derivative,\n          \"checkboxes\": checkboxes,\n          \"selectedIndices\": selectedIndices,\n          \"requiredField\": this.requiredField\n        };\n      },\n\n      getPlate: function() {\n        let wells = {};\n        let derivative = this.engine.derivative;\n        for (let index in derivative) {\n          if (!derivative.hasOwnProperty(index)) {\n            continue;\n          }\n\n          let address = this.indexToAddress(index);\n          let well = derivative[index];\n          wells[address] = $.extend(true, {}, well);\n        }\n        let checkboxes = this.getCheckboxes();\n        let selectedAddresses = this.getSelectedAddresses();\n\n        return {\n          \"wells\": wells,\n          \"checkboxes\": checkboxes,\n          \"selectedAddresses\": selectedAddresses,\n          \"requiredField\": this.requiredField\n        };\n      }\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\nplateMapWidget.addDataToFields = function() {\n\n  return {\n\n    _addDataToTabFields: function(well) {\n      // Configure how data is added to tab fields\n      for (let i = 0; i < this.fieldList.length; i++) {\n        let field = this.fieldList[i];\n        let v = well[field.id];\n        if (v === undefined) {\n          v = null;\n        }\n        field.setValue(v);\n      }\n    }\n  }\n};\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.addTabData = function() {\n\n    return {\n\n      fieldList: [],\n      fieldMap: {},\n      autoId: 1,\n\n      _addTabData: function() {\n        // Here we may need more changes because attributes format likely to change\n        let tabData = this.options.attributes.tabs;\n        let that = this;\n        this.requiredField = [];\n        let multiplexFieldArray = [];\n        tabData.forEach(function(tab, tabPointer) {\n          if (tab[\"fields\"]) {\n            let tabFields = tab[\"fields\"];\n            let fieldArray = [];\n            // Now we look for fields in the json\n            for (var i = 0; i < tabFields.length; i++) {\n              let data = tabFields[i];\n\n              if (!data.id) {\n                data.id = \"Auto\" + that.autoId++;\n                console.log(\"Field autoassigned id \" + data.id);\n              }\n              if (!data.type) {\n                data.type = \"text\";\n                console.log(\"Field \" + data.id + \" autoassigned type \" + data.type);\n              }\n\n              let field;\n              if (data.type === \"multiplex\") {\n                field = that._makeMultiplexField(data, tabPointer, fieldArray);\n                that.defaultWell[field.id] = [];\n                multiplexFieldArray.push(field);\n              } else {\n                field = that._makeRegularField(data, tabPointer, fieldArray, true);\n                if (data.type === \"multiselect\") {\n                  that.defaultWell[field.id] = [];\n                  multiplexFieldArray.push(field);\n                } else {\n                  that.defaultWell[field.id] = null;\n                }\n              }\n            }\n\n            that.allDataTabs[tabPointer][\"fields\"] = fieldArray;\n          } else {\n            console.log(\"unknown format in field initialization\");\n          }\n        });\n        that.multipleFieldList = multiplexFieldArray;\n      },\n\n      _makeSubField: function(mainField, data, tabPointer, fieldArray) {\n        let that = this;\n        if (!data.id) {\n          data.id = \"Auto\" + that.autoId++;\n          console.log(\"Field autoassigned id \" + data.id);\n        }\n        if (!data.type) {\n          data.type = \"text\";\n          console.log(\"Field \" + data.id + \" autoassigned type \" + data.type);\n        }\n        let wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        let wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        let wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side\");\n        let nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        let fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        $(wrapperDivRightSide).append(nameContainer);\n        $(wrapperDivRightSide).append(fieldContainer);\n        $(wrapperDiv).append(wrapperDivLeftSide);\n        $(wrapperDiv).append(wrapperDivRightSide);\n        $(that.allDataTabs[tabPointer]).append(wrapperDiv);\n\n        let field = {\n          id: data.id,\n          full_id: mainField.id + \"_\" + data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required || false\n        };\n\n        fieldArray.push(field);\n        that.fieldMap[field.full_id] = field;\n\n        return field;\n      },\n\n      _makeRegularField: function(data, tabPointer, fieldArray, checkbox) {\n        let that = this;\n        let wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        let wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        let wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side \");\n        let nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        let fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        wrapperDivRightSide.append(nameContainer);\n        wrapperDivRightSide.append(fieldContainer);\n        wrapperDiv.append(wrapperDivLeftSide);\n        wrapperDiv.append(wrapperDivRightSide);\n        that.allDataTabs[tabPointer].append(wrapperDiv);\n\n        let field = {\n          id: data.id,\n          full_id: data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required\n        };\n\n        if (field.required) {\n          that.requiredField.push(field.id);\n        }\n\n        fieldArray.push(field);\n        that.fieldList.push(field);\n        that.fieldMap[field.full_id] = field;\n\n        // Adding checkbox\n        if (checkbox) {\n          that._addCheckBox(field);\n        }\n        that._createField(field);\n\n        field.onChange = function() {\n          let v = field.getValue();\n          let data = {};\n          data[field.id] = v;\n          that._addAllData(data);\n        };\n        return field;\n      },\n\n      _makeMultiplexField: function(data, tabPointer, fieldArray) {\n        let that = this;\n        let wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        let wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        let wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side \");\n        let nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        let fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        wrapperDivRightSide.append(nameContainer);\n        wrapperDivRightSide.append(fieldContainer);\n        wrapperDiv.append(wrapperDivLeftSide);\n        wrapperDiv.append(wrapperDivRightSide);\n        that.allDataTabs[tabPointer].append(wrapperDiv);\n\n        let field = {\n          id: data.id,\n          full_id: data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required\n        };\n\n        fieldArray.push(field);\n        that.fieldList.push(field);\n        that.fieldMap[field.full_id] = field;\n\n        let subFieldList = [];\n        //create subfields\n        let requiredSubField = [];\n        for (let i = 0; i < data.multiplexFields.length; i++) {\n          let subFieldData = data.multiplexFields[i];\n          let subField = that._makeSubField(field, subFieldData, tabPointer, fieldArray);\n          subFieldList.push(subField);\n\n          // stores required  subField\n          if (subFieldData.required) {\n            requiredSubField.push(subField.id);\n          }\n        }\n\n        //store required field\n        if (field.required || requiredSubField.length) {\n          this.requiredField.push({\n            multiplexId: field.id,\n            subFields: requiredSubField\n          });\n        }\n\n        field.subFieldList = subFieldList;\n        that._createField(field);\n        that._addCheckBox(field);\n\n        subFieldList.forEach(function(subfield) {\n          subfield.mainMultiplexField = field;\n          that._createField(subfield);\n          that._addCheckBox(subfield);\n          // overwrite subField setvalue\n          subfield.onChange = function() {\n            let v = subfield.getValue();\n            let mainRefField = subfield.mainMultiplexField;\n            let curId = mainRefField.singleSelectValue();\n            //let curDataLs = mainRefField.detailData;\n            let curVal = {};\n            curVal[mainRefField.id] = curId;\n            //append subfields\n            curVal[subfield.id] = v;\n            let returnVal = {\n              id: curId,\n              value: curVal\n            };\n\n            field._changeMultiFieldValue(returnVal, null);\n            let curDataLs = mainRefField.detailData;\n            if (curDataLs !== null) {\n              curId = mainRefField.singleSelectValue();\n              curDataLs = curDataLs.map(function(curData) {\n                if (curData[mainRefField.id] === curId) {\n                  curData[subfield.id] = v;\n                }\n                return curData;\n              });\n            }\n            mainRefField.detailData = curDataLs;\n          };\n\n        });\n\n        return field;\n      }\n    }\n  }\n\n})(jQuery);\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.addWarningMsg = function() {\n    // For those check boxes associated with every field in the tab\n    return {\n      fieldWarningMsg: function(field, text, include) {\n        let that = this;\n        let imgId = \"fieldWarning\" + field.full_id;\n        let img = $(\"<span>\").html(that._assets.warningImg).attr(\"id\", imgId).addClass(\"plate-field-warning-image\");\n        if (include) {\n          if (field.root.find(\"#\" + imgId).length <= 0) {\n            field.root.find(\".plate-setup-tab-name\").text(\" \" + field.name);\n            field.root.find(\".plate-setup-tab-name\").prepend(img);\n\n            let popText = $(\"<div/>\").addClass(\"pop-out-text\");\n            popText.text(text);\n            field.root.find(\".plate-setup-tab-name\").append(popText);\n\n            $(\"#\" + imgId).hover(function() {\n              popText[0].style.display = 'flex';\n            }, function() {\n              popText.hide();\n            });\n          }\n\n\n        } else {\n          if (field.root.find(\"#\" + imgId).length > 0) {\n            field.root.find(\".plate-setup-tab-name\").text(field.name);\n            $(\"#\" + imgId).remove();\n          }\n        }\n      },\n\n      removeWarningMsg: function(field, text, include) {\n        let that = this;\n        let imgId = \"fieldWarning\" + field.full_id;\n        if (include) {\n          let img = $(\"<span>\").html(that._assets.warningImg).attr(\"id\", imgId).addClass(\"plate-field-warning-image\");\n          field.root.find(\".plate-setup-tab-name\").append(img);\n\n          let popText = $(\"<div/>\").addClass(\"pop-out-text\");\n          popText.text(text);\n          field.root.find(\".plate-setup-tab-name\").append(popText);\n\n          img.hover(function() {\n            popText[0].style.display = 'inline-block';\n          }, function() {\n            popText.hide();\n          });\n        } else {\n          $(\"#\" + imgId).remove();\n        }\n      },\n\n      applyFieldWarning: function(wells) {\n        let that = this;\n        let fieldData = {};\n        that.fieldList.forEach(function(field) {\n          fieldData[field.id] = [];\n        });\n        wells.forEach(function(well) {\n          if (!that.engine.wellEmpty(well)) {\n            for (let fieldId in fieldData) {\n              if (fieldData.hasOwnProperty(fieldId)) {\n                if (fieldId in well) {\n                  fieldData[fieldId].push(well[fieldId]);\n                } else {\n                  fieldData[fieldId].push(null);\n                }\n              }\n            }\n          }\n        });\n        for (let i = 0; i < that.fieldList.length; i++) {\n          let field = that.fieldList[i];\n          if (field.applyMultiplexSubFieldColor) {\n            field.applyMultiplexSubFieldColor(fieldData[field.id]);\n          } else {\n            if (field.required) {\n              let include = false;\n              fieldData[field.id].forEach(function(val) {\n                // for multiselect\n                if (val instanceof Array) {\n                  if (val.length === 0) {\n                    include = true;\n                  }\n                } else {\n                  if (val === null) {\n                    include = true;\n                  }\n                }\n              });\n              //field.root.find(\".plate-setup-tab-name\").css(\"background\", color);\n              that.fieldWarningMsg(field, \"required field\", include);\n            }\n          }\n        }\n      }\n    }\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.bottomTable = function() {\n    // for bottom table\n    return {\n      _bottomScreen: function() {\n        this.bottomContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-bottom-container\");\n        this.bottomTableContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-bottom-table-container\");\n        this.bottomTable = this._createElement(\"<table></table>\").addClass(\"plate-setup-bottom-table\");\n        this.bottomTableHead = this._createElement(\"<thead></thead>\");\n        this.bottomTableBody = this._createElement(\"<tbody></tbody>\");\n        this.bottomTable.append(this.bottomTableHead);\n        this.bottomTable.append(this.bottomTableBody);\n        this.bottomTableContainer.append(this.bottomTable);\n        this.bottomContainer.append(this.bottomTableContainer);\n        this.container.append(this.bottomContainer);\n      },\n\n      addBottomTableHeadings: function() {\n\n        let row = this._createElement(\"<tr></tr>\");\n\n        let singleField = this._createElement(\"<th></th>\")\n          .text(\"Group\");\n        row.html(singleField);\n\n        this.rowCounter = 1;\n\n        for (let i = 0; i < this.globalSelectedAttributes.length; i++) {\n          let attr = this.globalSelectedAttributes[i];\n          let field = this.fieldMap[attr];\n          let singleField = this._createElement(\"<th></th>\").text(field.name);\n          row.append(singleField);\n          this.rowCounter = this.rowCounter + 1;\n        }\n\n        // Now we append all the captions at the place.\n        this.bottomTableBody.empty();\n        this.bottomTableHead.empty();\n        this.bottomTableHead.append(row);\n        this.adjustFieldWidth(row);\n      },\n\n      tileAttrText: function(tile, attr) {\n        let well = this.engine.derivative[tile.index];\n        let field = this.fieldMap[attr];\n        return field.getText(well[attr]);\n      },\n\n      addBottomTableRow: function(color, singleStack) {\n        let that = this;\n        let modelTile = this.allTiles[singleStack[0]];\n        let row = this._createElement(\"<tr></tr>\");\n        let plateIdDiv = this._createElement(\"<td></td>\").addClass(\"plate-setup-bottom-id\");\n        let numberText = this._createElement(\"<button/>\");\n        numberText.addClass(\"plate-setup-color-text\");\n        numberText.text(color);\n        plateIdDiv.append(numberText);\n\n        numberText.click(function(evt) {\n          let addressToSelect = singleStack.map(that.indexToAddress, that);\n          if (evt.ctrlKey) {\n            that.getSelectedAddresses().forEach(function(val) {\n              if (addressToSelect.indexOf(val) < 0) {\n                addressToSelect.push(val);\n              }\n            })\n          }\n          that.setSelectedAddresses(addressToSelect);\n        });\n\n        if (color > 0) {\n          color = ((color - 1) % (this.colorPairs.length - 1)) + 1;\n        }\n        let colorStops = this.colorPairs[color];\n\n        plateIdDiv.css(\"background\", \"linear-gradient(to right, \" + colorStops[0] + \" , \" + colorStops[1] + \")\");\n\n        row.append(plateIdDiv);\n\n        for (let i = 0; i < this.globalSelectedAttributes.length; i++) {\n          let attr = this.globalSelectedAttributes[i];\n          let text = this.tileAttrText(modelTile, attr);\n          let dataDiv = this._createElement(\"<td></td>\").text(text);\n          row.append(dataDiv);\n        }\n        this.bottomTableBody.append(row);\n        this.adjustFieldWidth(row);\n      },\n\n      bottomForFirstTime: function() {\n        this.addBottomTableHeadings();\n        // This is executed for the very first time.. !\n        let row = this._createElement(\"<tr></tr>\");\n\n        let colorStops = this.colorPairs[0];\n        let plateIdDiv = this._createElement(\"<td></td>\");\n        plateIdDiv.css(\"background\", \"-webkit-linear-gradient(left, \" + colorStops[0] + \" , \" + colorStops[1] + \")\");\n        row.append(plateIdDiv);\n        this.bottomTableBody.append(row);\n        this.createExportButton();\n      },\n\n      adjustFieldWidth: function(row) {\n\n        let length = this.rowCounter;\n        if ((length) * 150 > 1024) {\n          row.css(\"width\", (length) * 152 + \"px\");\n        }\n      },\n\n      downloadCSV: function(csv, filename) {\n        let csvFile;\n        let downloadLink;\n\n        // CSV file\n        csvFile = new Blob([csv], {\n          type: \"text/csv\"\n        });\n\n        // Download link\n        downloadLink = document.createElement(\"a\");\n\n        // File name\n        downloadLink.download = filename;\n\n        // Create a link to the file\n        downloadLink.href = window.URL.createObjectURL(csvFile);\n\n        // Hide download link\n        downloadLink.style.display = \"none\";\n\n        // Add the link to DOM\n        document.body.appendChild(downloadLink);\n\n        // Click download link\n        downloadLink.click();\n      },\n\n      exportData: function(format) {\n        let data = [];\n        let rows = document.querySelectorAll(\"table tr\");\n\n        let colorLocMap = {};\n        let colorLocIdxMap = this.engine.stackUpWithColor;\n        for (let colorIdx in colorLocIdxMap) {\n          if (colorLocIdxMap.hasOwnProperty(colorIdx)) {\n            colorLocMap[colorIdx] = colorLocIdxMap[colorIdx].map(this.indexToAddress, this);\n          }\n        }\n\n        for (let i = 0; i < rows.length; i++) {\n          let row = [],\n            cols = rows[i].querySelectorAll(\"td, th\");\n\n          for (let j = 0; j < cols.length; j++) {\n            let v = \"\";\n            if (cols[j].innerText) {\n              if (format === \"csv\") {\n                v = '\"' + cols[j].innerText.replace(/\"/g, '\"\"') + '\"';\n              } else {\n                v = cols[j].innerText;\n              }\n            }\n            row.push(v);\n\n            // add location column\n            if (i === 0 && j === 0) {\n              if (format === \"csv\") {\n                row.push('\"Location\"');\n              } else if (format === 'clipboard') {\n                row.push(\"Location\");\n              }\n\n            }\n            if (i !== 0 && j === 0) {\n              let loc = '';\n              if (colorLocMap[parseInt(cols[j].innerText)]) {\n                if (format === \"csv\") {\n                  loc = '\"' + colorLocMap[parseInt(cols[j].innerText)].join(\",\") + '\"';\n                } else if (format === 'clipboard') {\n                  loc = colorLocMap[parseInt(cols[j].innerText)].join(\",\");\n                }\n              }\n              row.push(loc);\n            }\n          }\n\n          if (format === \"csv\") {\n            data.push(row.join(\",\"));\n          } else if (format === 'clipboard') {\n            data.push(row.join(\"\\t\"));\n            //data.push(row);   // for text type\n          }\n\n        }\n        if (format === \"csv\") {\n          // Download CSV file\n          this.downloadCSV(data.join(\"\\n\"), 'table.csv');\n        } else if (format === 'clipboard') {\n          //return formatTableToString(data);   // for text type\n          return data.join(\"\\n\");\n        }\n      },\n\n      createExportButton: function() {\n        let that = this;\n        let overlayContainer = $(\"<div>\").addClass(\"plate-setup-bottom-control-container\");\n\n        let descriptionDiv = $(\"<div>\").addClass(\"plate-setup-overlay-text-container\");\n        descriptionDiv.text(\"Color groups\");\n        overlayContainer.append(descriptionDiv);\n\n        let buttonContainer = $(\"<div>\").addClass(\"plate-setup-overlay-bottom-button-container\");\n\n        // create export csv option\n        let exportButton = $(\"<button/>\").addClass(\"plate-setup-button\");\n        exportButton.text(\"Export CSV\");\n        buttonContainer.append(exportButton);\n\n        exportButton.click(function() {\n          that.exportData('csv');\n          exportButton.text(\"Exported\");\n          exportButton[0].classList.remove(\"plate-setup-button\");\n          exportButton.addClass(\"plate-setup-clicked-button\");\n          setTimeout(resetExportText, 3000);\n        });\n\n        function resetExportText() {\n          exportButton.text(\"Export CSV\");\n          exportButton[0].classList.remove(\"plate-setup-clicked-button\");\n          exportButton.addClass(\"plate-setup-button\");\n        }\n\n        // creat clipboard option, CLipboard is an external js file located in vendor/asset/javascripts\n        let clipboardButton = $(\"<button/>\").addClass(\"plate-setup-button\");\n        clipboardButton.text(\"Copy To Clipboard\");\n        buttonContainer.append(clipboardButton);\n\n        let clipboard = new ClipboardJS(clipboardButton.get(0), {\n          text: function() {\n            return that.exportData(\"clipboard\");\n          }\n        });\n\n        clipboard.on('success', function() {\n          clipboardButton.text(\"Copied as tab-delimited format\");\n          clipboardButton[0].classList.remove(\"plate-setup-button\");\n          clipboardButton.addClass(\"plate-setup-clicked-button\");\n          setTimeout(resetClipboardText, 3000);\n        });\n\n        function resetClipboardText() {\n          clipboardButton.text(\"Copy To Clipboard\");\n          clipboardButton[0].classList.remove(\"plate-setup-clicked-button\");\n          clipboardButton.addClass(\"plate-setup-button\");\n        }\n\n        clipboard.on('error', function() {\n          clipboardButton.text(\"Failed to copy table to clipboard: browser may be incompatible\");\n          setTimeout(resetClipboardText, 3000);\n        });\n\n        overlayContainer.append(buttonContainer);\n        this.bottomContainer.html(overlayContainer);\n      }\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.checkBox = function() {\n    // For those check boxes associated with every field in the tab\n    return {\n\n      globalSelectedAttributes: [],\n      globalSelectedMultiplexSubfield: [],\n      allCheckboxes: [],\n\n      _addCheckBox: function(field) {\n        let checkImage = $(\"<span>\").html(this._assets.dontImg).addClass(\"plate-setup-tab-check-box bg-light\")\n          .data(\"clicked\", false);\n        let linkedFieldId = field.full_id;\n        checkImage.data(\"linkedFieldId\", linkedFieldId);\n        field.root.find(\".plate-setup-tab-field-left-side\").empty().append(checkImage);\n        this._applyCheckboxHandler(checkImage); // Adding handler for change the image when clicked\n        field.checkbox = checkImage;\n        this.allCheckboxes.push(linkedFieldId);\n      },\n\n      _applyCheckboxHandler: function(checkBoxImage) {\n        let that = this;\n        checkBoxImage.click(function() {\n          let checkBox = $(this);\n\n          let changes = {};\n          changes[checkBox.data(\"linkedFieldId\")] = !checkBox.data(\"clicked\");\n\n          that.changeCheckboxes(changes);\n        });\n      },\n\n      getCheckboxes: function () {\n        return this.allCheckboxes.filter(function (fieldId) {\n          let field = this.fieldMap[fieldId];\n          if (field.mainMultiplexField) {\n            let subfields = this.globalSelectedMultiplexSubfield[field.mainMultiplexField.id] || [];\n            return subfields.indexOf(field.id);\n          } else {\n            return this.globalSelectedAttributes.indexOf(field.id) >= 0;\n          }\n        }, this);\n      },\n\n      changeSubFieldsCheckboxes: function(field, changes) {\n        let that = this;\n        let subFieldToInclude = [];\n\n        field.subFieldList.forEach(function(subField) {\n          let checkImage = subField.checkbox;\n          let fieldId = checkImage.data(\"linkedFieldId\");\n          let clicked = checkImage.data(\"clicked\");\n          if (fieldId in changes) {\n            clicked = Boolean(changes[fieldId]);\n          }\n          checkImage.data(\"clicked\", clicked);\n          if (clicked) {\n            checkImage.html(that._assets.doImg);\n            subFieldToInclude.push(subField.id);\n          } else {\n            checkImage.html(that._assets.dontImg);\n          }\n        });\n        return subFieldToInclude;\n      },\n\n      changeCheckboxes: function(changes, noUndoRedo) {\n        let gsa = [];\n        let multiplexCheckedSubField = {};\n        for (let i = 0; i < this.fieldList.length; i++) {\n          let field = this.fieldList[i];\n          if (field.checkbox) {\n            if (field.subFieldList) {\n              multiplexCheckedSubField[field.id] = this.changeSubFieldsCheckboxes(field, changes);\n            }\n\n            let checkImage = field.checkbox;\n            let fieldId = checkImage.data(\"linkedFieldId\");\n            let clicked = checkImage.data(\"clicked\");\n            if (fieldId in changes) {\n              clicked = Boolean(changes[fieldId]);\n            }\n            checkImage.data(\"clicked\", clicked);\n            if (clicked) {\n              gsa.push(fieldId);\n              checkImage.html(this._assets.doImg);\n            } else {\n              checkImage.html(this._assets.dontImg);\n            }\n          }\n        }\n        this.globalSelectedMultiplexSubfield = multiplexCheckedSubField;\n        this.globalSelectedAttributes = gsa;\n        this._clearPresetSelection();\n        this._colorMixer();\n        if (!noUndoRedo) {\n          this.addToUndoRedo();\n        }\n      },\n\n      setSubFieldCheckboxes: function(field, fieldIds) {\n        let that = this;\n        let subFieldToInclude = [];\n        field.subFieldList.forEach(function(subField) {\n          let checkImage = subField.checkbox;\n          let fieldId = checkImage.data(\"linkedFieldId\");\n          let clicked = fieldIds.indexOf(fieldId) >= 0;\n          checkImage.data(\"clicked\", clicked);\n          if (clicked) {\n            checkImage.html(that._assets.doImg);\n            subFieldToInclude.push(subField.id);\n          } else {\n            checkImage.html(that._assets.dontImg);\n          }\n        });\n        return subFieldToInclude;\n      },\n\n      setCheckboxes: function(fieldIds, noUndoRedo) {\n        fieldIds = fieldIds || [];\n        let gsa = [];\n        let multiplexCheckedSubField = {};\n\n        for (let i = 0; i < this.fieldList.length; i++) {\n          let field = this.fieldList[i];\n          if (field.checkbox) {\n            // special handling for multiplex field\n            if (field.subFieldList) {\n              multiplexCheckedSubField[field.id] = this.setSubFieldCheckboxes(field, fieldIds);\n            }\n\n            let checkImage = field.checkbox;\n            let fieldId = checkImage.data(\"linkedFieldId\");\n            let clicked = fieldIds.indexOf(fieldId) >= 0;\n            checkImage.data(\"clicked\", clicked);\n            if (clicked) {\n              gsa.push(fieldId);\n              checkImage.html(this._assets.doImg);\n            } else {\n\n              checkImage.html(this._assets.dontImg);\n            }\n          }\n        }\n        this.globalSelectedMultiplexSubfield = multiplexCheckedSubField;\n        this.globalSelectedAttributes = gsa;\n        this._clearPresetSelection();\n        this._colorMixer();\n        if (!noUndoRedo) {\n          this.addToUndoRedo();\n        }\n      }\n\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\nplateMapWidget.colorManager = function() {\n\n  return {\n    // See these are color pairs for the gradient.\n    colorPairs: [\n      [\"#e6e6e6\", \"#808080\"],\n      [\"#66e8ff\", \"#0082c8\"],\n      [\"#ff7fb1\", \"#e6194b\"],\n      [\"#a2ffb1\", \"#3cb44b\"],\n      [\"#f784ff\", \"#911eb4\"],\n      [\"#ffe897\", \"#f58231\"],\n      [\"#6666ff\", \"#0000FF\"],\n      [\"#ffff7f\", \"#ffe119\"],\n      [\"#acffff\", \"#46f0f0\"],\n      [\"#ff98ff\", \"#f032e6\"],\n      [\"#ffffa2\", \"#d2f53c\"],\n      [\"#ffffff\", \"#fabebe\"],\n      [\"#66e6e6\", \"#008080\"],\n      [\"#ffffff\", \"#e6beff\"],\n      [\"#ffd48e\", \"#aa6e28\"],\n      [\"#e66666\", \"#800000\"],\n      [\"#ffffff\", \"#aaffc3\"],\n      [\"#e6e666\", \"#808000\"],\n      [\"#ffffff\", \"#ffd8b1\"],\n      [\"#66a9ef\", \"#004389\"],\n      [\"#ff6672\", \"#a7000c\"],\n      [\"#66db72\", \"#00750c\"],\n      [\"#b866db\", \"#520075\"],\n      [\"#ffa966\", \"#b64300\"],\n      [\"#ffff66\", \"#c0a200\"],\n      [\"#6dffff\", \"#07b1b1\"],\n      [\"#ff66ff\", \"#b100a7\"],\n      [\"#f9ff66\", \"#93b600\"],\n      [\"#ffe5e5\", \"#bb7f7f\"],\n      [\"#66a7a7\", \"#004141\"],\n      [\"#ffe5ff\", \"#a77fc0\"],\n      [\"#d19566\", \"#6b2f00\"],\n      [\"#ffffef\", \"#c0bb89\"],\n      [\"#d1ffea\", \"#6bc084\"],\n      [\"#a7a766\", \"#414100\"],\n      [\"#ffffd8\", \"#c09972\"],\n      [\"#a5ffff\", \"#3fc1ff\"],\n      [\"#ffbef0\", \"#ff588a\"],\n      [\"#e1fff0\", \"#7bf38a\"],\n      [\"#ffc3ff\", \"#d05df3\"],\n      [\"#ffffd6\", \"#ffc170\"],\n      [\"#a5a5ff\", \"#3f3fff\"],\n      [\"#ffffbe\", \"#ffff58\"],\n      [\"#ebffff\", \"#85ffff\"],\n      [\"#ffd7ff\", \"#ff71ff\"],\n      [\"#a5ffff\", \"#3fbfbf\"],\n      [\"#ffffcd\", \"#e9ad67\"],\n      [\"#ffa5a5\", \"#bf3f3f\"],\n      [\"#ffffa5\", \"#bfbf3f\"]\n    ]\n  }\n};\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  function select2close(ev) {\n    if (ev.params.args.originalEvent) {\n      // When unselecting (in multiple mode)\n      ev.params.args.originalEvent.stopPropagation();\n    } else {\n      // When clearing (in single mode)\n      $(this).one('select2:opening', function(ev) { ev.preventDefault(); });\n    }\n  }\n\n  function select2fix(input) {\n    // prevents select2 open on clear as of v4.0.8\n    input.on('select2:unselecting', select2close);\n  }\n\n  function select2setData(input, data, selected) {\n    input.empty();\n    let dataAdapter = input.data('select2').dataAdapter;\n    dataAdapter.addOptions(dataAdapter.convertToOptions(data));\n    input.val(selected);\n  }\n\n  plateMapWidget.createField = function() {\n    // It creates those fields in the tab , there is 4 types of them.\n    return {\n\n      _createField: function(field) {\n        switch (field.data.type) {\n          case \"text\":\n            this._createTextField(field);\n            this._handleFieldUnits(field);\n            break;\n\n          case \"numeric\":\n            this._createNumericField(field);\n            this._handleFieldUnits(field);\n            break;\n\n          case \"select\":\n            this._createSelectField(field);\n            this._handleFieldUnits(field);\n            break;\n\n          case \"multiselect\":\n            this._createMultiSelectField(field);\n            break;\n\n          case \"boolean\":\n            this._createBooleanField(field);\n            break;\n\n          case \"multiplex\":\n            this._createMultiplexField(field);\n            break;\n        }\n      },\n\n      _handleFieldUnits: function (field) {\n        let data = field.data;\n\n        // Adding unit\n        let units = data.units || [];\n        let defaultUnit = data.defaultUnit || null;\n        let unitInput = null;\n        if (defaultUnit) {\n          if (units.length) {\n            if (units.indexOf(defaultUnit) < 0) {\n              defaultUnit = units[0];\n            }\n          } else {\n            units = [defaultUnit];\n          }\n        } else {\n          if (units.length) {\n            defaultUnit = units[0];\n          }\n        }\n\n        if (units.length) {\n          field.units = units;\n          field.hasUnits = true;\n          field.defaultUnit = defaultUnit;\n          this._makeFieldUnits(field);\n        }\n      },\n\n      _makeFieldUnits: function(field) {\n        let full_id = field.full_id;\n        let units = field.units;\n        let defaultUnit = field.defaultUnit;\n        let unitInput = null;\n\n        field.disabledRegular = field.disabled;\n        field.parseRegularValue = field.parseValue;\n        field.setRegularValue = field.setValue;\n        field.getRegularValue = field.getValue;\n        field.getRegularText = field.getText;\n\n        if (units.length) {\n          if (units.length === 1) {\n            let unitText = $(\"<div></div>\").addClass(\"plate-setup-tab-unit\");\n            unitText.text(defaultUnit);\n            field.root.find(\".plate-setup-tab-field-container\").append(unitText);\n          } else {\n            unitInput = this._createElement(\"<select/>\").attr(\"id\", full_id + \"Units\")\n                .addClass(\"plate-setup-tab-unit-select-field\");\n\n            field.root.find(\".plate-setup-tab-field-container\").append(unitInput);\n\n            let selected = null;\n            let unitData = units.map(function(unit) {\n              let o = {\n                id: unit,\n                text: unit\n              };\n              if (unit === defaultUnit) {\n                selected = unit;\n              }\n              return o;\n            });\n\n            let opts = {\n              data: unitData,\n              allowClear: false,\n              minimumResultsForSearch: 10\n            };\n\n            unitInput.select2(opts);\n            unitInput.val(selected);\n          }\n        }\n\n        field.disabled = function(bool) {\n          bool = field.disabledRegular(bool);\n          if (unitInput) {\n            unitInput.prop(\"disabled\", bool);\n          }\n          return bool;\n        };\n\n        field.parseValue = function(value) {\n          let v;\n          if ($.isPlainObject(value)) {\n            v = field.parseRegularValue(value.value);\n            if (v === null) {\n              return null;\n            }\n            return {\n              value: v,\n              unit: field.parseUnit(value.unit)\n            };\n          } else {\n            v = field.parseRegularValue(value);\n            if (v === null) {\n              return null;\n            }\n            return {\n              value: v,\n              unit: field.defaultUnit\n            };\n          }\n        };\n\n        field.getValue = function() {\n          let v = field.getRegularValue();\n\n          if (v === null) {\n            return null;\n          } else {\n            let returnVal = {\n              value: v,\n              unit: field.getUnit()\n            };\n\n            if (field.data.hasMultiplexUnit) {\n              // include unitTypeId and UnitId to returnVal\n              let unitMap = field.data.unitMap;\n              for (let unitTypeKey in unitMap) {\n                if (!unitMap.hasOwnProperty(unitTypeKey)) {\n                  continue;\n                }\n                let unitTypeUnits = unitMap[unitTypeKey];\n                unitTypeUnits.forEach(function(unit) {\n                  if (unit.text === returnVal.unit) {\n                    returnVal['unitTypeId'] = unitTypeKey;\n                    returnVal['unitId'] = unit.id;\n                  }\n                })\n              }\n            }\n            return returnVal;\n          }\n        };\n\n        field.setValue = function(value) {\n          if ($.isPlainObject(value)) {\n            field.setUnit(value.unit || field.defaultUnit);\n            field.setRegularValue(value.value);\n\n          } else {\n            field.setRegularValue(value);\n            field.setUnit(field.defaultUnit)\n          }\n        };\n\n        field.setUnitOpts = function(opts) {\n          field.units = opts || null;\n          field.defaultUnit = null;\n\n          let newUnits = [];\n          let selected = null;\n          if (field.units && field.units.length) {\n            field.defaultUnit = field.units[0];\n            newUnits = field.units.map(function (curUnit) {\n              let cleanUnit = {\n                id: curUnit,\n                text: curUnit\n              };\n              if (curUnit === field.defaultUnit) {\n                selected = curUnit;\n              }\n              return cleanUnit;\n            });\n          }\n\n          select2setData(unitInput, newUnits, selected);\n        };\n\n        field.parseUnit = function(unit) {\n          if (unit == null || unit === \"\") {\n            return field.defaultUnit;\n          }\n          for (let i = 0; i < units.length; i++) {\n            if (unit.toLowerCase() === units[i].toLowerCase()) {\n              return units[i];\n            }\n          }\n          throw \"Invalid unit \" + unit + \" for field \" + full_id;\n        };\n\n        field.getUnit = function() {\n          if (unitInput) {\n            return unitInput.val();\n          } else {\n            return field.defaultUnit;\n          }\n        };\n\n        field.setUnit = function(unit) {\n          if (unitInput) {\n            unit = unit || field.defaultUnit;\n            unitInput.val(unit);\n            unitInput.trigger(\"change.select2\");\n          }\n        };\n\n        // val now contains unit\n        field.getText = function(val) {\n          if (typeof (val) === 'object' && val) {\n            let v = val.value;\n            let u = val.unit;\n            if (v == null) {\n              return \"\";\n            }\n            v = v.toString();\n            if (!u) {\n              u = defaultUnit;\n            }\n            if (u) {\n              v = v + \" \" + u;\n            }\n            return v;\n          } else {\n            return field.getRegularText(val);\n          }\n        };\n\n        field.parseText = function(v) {\n          let value = field.parseValue(v);\n          if (value && typeof (value) === \"object\") {\n            return field.getRegularText(value.value) + value.unit;\n          } else if (value != null) {\n            return field.getRegularText(value)\n          } else {\n            return null;\n          }\n        };\n\n        if (unitInput) {\n          unitInput.on(\"change\", function() {\n            field.onChange();\n          });\n        }\n\n        field.unitInput = unitInput;\n      },\n\n      _createTextField: function(field) {\n        let input = this._createElement(\"<input>\").attr(\"id\", field.full_id)\n          .addClass(\"plate-setup-tab-input\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n\n        field.parseValue = function(v) {\n          if (v) {\n            v = String(v);\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        field.getValue = function() {\n          return input.val().trim() || null;\n        };\n\n        field.setValue = function(v) {\n          input.val(v);\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return v;\n        };\n\n        field.disabled = function(bool) {\n          bool = field.isDisabled || bool;\n          field.input.prop(\"disabled\", bool);\n          return bool;\n        };\n\n        field.parseText = field.parseValue;\n\n        input.on(\"input\", function() {\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createOpts: function(config) {\n        let opts = {\n          allowClear: true,\n          placeholder: \"select\"\n        };\n        let data_specified = false;\n\n        if (config.options) {\n          opts.data = config.options;\n          data_specified = true;\n        }\n        if (config.ajax) {\n          opts.ajax = ajax;\n          data_specified = true;\n        }\n        if (!data_specified) {\n          throw \"Must specify data or ajax\";\n        }\n        return opts;\n      },\n\n      _createSelectField: function(field) {\n        let full_id = field.full_id;\n        let that = this;\n        let input = this._createElement(\"<select/>\").attr(\"id\", full_id)\n          .addClass(\"plate-setup-tab-select-field\").addClass(\"plate-setup-tab-input\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n\n        let opts = that._createOpts(field.data);\n        let optMap = {};\n        opts.data.forEach(function(opt) {\n          optMap[String(opt.id)] = opt;\n        });\n\n        input.select2(opts);\n        select2fix(input);\n\n        let parseValue = function(value) {\n          let v = value;\n\n          if (v === \"\") {\n            v = null;\n          }\n          if (v == null) {\n            return null;\n          }\n          v = String(v);\n          if (v in optMap) {\n            return optMap[v].id;\n          } else {\n            throw \"Invalid value \" + value + \" for select field \" + full_id;\n          }\n        };\n        field.parseValue = parseValue;\n\n        field.disabled = function(bool) {\n          bool = field.isDisabled || bool;\n          field.input.prop(\"disabled\", bool);\n          return bool;\n        };\n\n        field.getValue = function() {\n          return parseValue(input.val());\n        };\n\n        field.setValue = function(v) {\n          input.val(v);\n          input.trigger(\"change.select2\")\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return optMap[String(v)].text;\n        };\n\n        field.parseText = function(value) {\n          let v = value;\n\n          if (v === \"\") {\n            v = null;\n          }\n          if (v == null) {\n            return null;\n          }\n          v = String(v);\n          if (v in optMap) {\n            return optMap[v].text;\n          } else {\n            throw \"Invalid text value \" + value + \" for select field \" + full_id;\n          }\n        };\n\n        input.on(\"change\", function() {\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createMultiSelectField: function(field) {\n        let full_id = field.full_id;\n        let that = this;\n        let input = this._createElement(\"<select/>\").attr(\"id\", full_id)\n          .addClass(\"plate-setup-tab-multiselect-field\");\n        input.attr(\"multiple\", \"multiple\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n\n        let opts = that._createOpts(field.data);\n        opts.multiple = true;\n        let optMap = {};\n        opts.data.forEach(function(opt) {\n          optMap[String(opt.id)] = opt;\n        });\n        input.select2(opts);\n        select2fix(input);\n\n        field.disabled = function(bool) {\n          bool = field.isDisabled || bool;\n          input.prop(\"disabled\", bool);\n          return bool;\n        };\n\n        field._parseOne = function(val) {\n          val = String(val);\n          if (val in optMap) {\n            return optMap[val].id;\n          } else {\n            throw \"Invalid value \" + val + \" for multiselect field \" + full_id;\n          }\n        };\n\n        field._parseMany = function(vals) {\n          if (vals && vals.length) {\n            vals = vals.map(field._parseOne, this);\n          } else {\n            vals = null;\n          }\n          return vals;\n        };\n\n        field.parseValue = function(value) {\n          return field._parseMany(value);\n        };\n\n        field.getValue = function() {\n          return field._parseMany(input.val());\n        };\n\n        field.setValue = function(v) {\n          v = v || [];\n          input.val(v);\n          input.trigger(\"change.select2\");\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          if (v.length > 0) {\n            return v.map(v => optMap[String(v)].text).join(\"; \");\n          }\n          return \"\";\n        };\n\n        field.multiOnChange = function(added, removed) {\n          if (added) {\n            added = added.id;\n          }\n          if (removed) {\n            removed = removed.id;\n          }\n          let data = {};\n          data[field.id] = {\n            multi: true,\n            added: added,\n            removed: removed\n          };\n          that._addAllData(data);\n        };\n\n        field.parseText = function(value) {\n          let v = value;\n          if (v && v.length) {\n            v = v.map(function(opt) {\n              opt = String(opt);\n              if (opt in optMap) {\n                return optMap[opt].text;\n              } else {\n                throw \"Invalid text value \" + opt + \" for multiselect field \" + full_id;\n              }\n            });\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        input.on(\"select2:select\", function (e) {\n          let v = field._parseOne(e.params.data.id);\n          v = {id: v};\n          field.multiOnChange(v, null);\n        });\n\n        input.on(\"select2:unselect\", function (e) {\n          let v = field._parseOne(e.params.data.id);\n          v = {id: v};\n          field.multiOnChange(null, v);\n        });\n\n        field.input = input;\n\n        that._createDeleteButton(field);\n      },\n\n      _createNumericField: function(field) {\n        let full_id = field.full_id;\n        let data = field.data;\n        let input = this._createElement(\"<input>\").addClass(\"plate-setup-tab-input\")\n          .attr(\"placeholder\", data.placeholder || \"\").attr(\"id\", full_id);\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n\n        field.disabled = function(bool) {\n          bool = field.isDisabled || bool;\n          field.input.prop(\"disabled\", bool);\n          return bool;\n        };\n\n        let parseValue = function(value) {\n          if (value == null) {\n            return null;\n          }\n          let v = String(value).trim();\n          if (v === \"\") {\n            return null;\n          }\n          \n          return v;\n        };\n        field.parseValue = parseValue;\n\n        field.getValue = function() {\n          let v = input.val().trim();\n          if (v === \"\") {\n            v = null;\n          }\n          return v;\n        };\n\n        field.setValue = function(value) {\n          input.val(value);\n        };\n\n        let getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          v = v.toString();\n          return v;\n        };\n        field.getText = getText;\n\n        field.parseText = function(v) {\n          return getText(parseValue(v));\n        };\n\n        input.on(\"input\", function() {\n          let v = field.getRegularValue();\n          if (isNaN(v)) {\n            //flag field as invalid\n            input.addClass(\"invalid\");\n          } else {\n            input.removeClass(\"invalid\");\n          }\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createBooleanField: function(field) {\n        let full_id = field.full_id;\n        let input = this._createElement(\"<select/>\").attr(\"id\", full_id)\n          .addClass(\"plate-setup-tab-select-field\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        let tval = {\n          id: \"true\",\n          text: \"true\"\n        };\n        let fval = {\n          id: \"false\",\n          text: \"false\"\n        };\n        let opts = {\n          data: [tval, fval],\n          placeholder: \"select\",\n          allowClear: true,\n          minimumResultsForSearch: -1\n        };\n\n        input.select2(opts);\n        select2fix(input);\n\n        field.disabled = function(bool) {\n          bool = field.isDisabled || bool;\n          field.input.prop(\"disabled\", bool);\n          return bool;\n        };\n\n        field.parseValue = function(value) {\n          if (value == null) {\n            return null;\n          }\n          let v = String(value).trim().toLowerCase();\n          if (v === \"true\") {\n            v = true;\n          } else if (v === \"false\") {\n            v = false;\n          } else if (v === \"\") {\n            v = null;\n          } else {\n            throw \"Invalid value \" + value + \" for boolean field \" + full_id;\n          }\n          return v;\n        };\n\n        field.getValue = function() {\n          let v = input.val();\n          switch (v) {\n            case \"true\":\n              return true;\n            case \"false\":\n              return false;\n            default:\n              return null;\n          }\n        };\n\n        field.setValue = function(v) {\n          if (v === 1 || v === true || v === \"true\") {\n            v = \"true\";\n          } else if (v === 0 || v === false || v === \"false\") {\n            v = \"false\";\n          } else {\n            v = null;\n          }\n          input.val(v);\n          input.trigger(\"change.select2\");\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return v.toString();\n        };\n\n        field.parseText = field.parseValue;\n\n        input.on(\"change\", function() {\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createMultiplexField: function(field) {\n        let that = this;\n        // make correct multiplex data\n        this._createMultiSelectField(field);\n\n        // single select\n        let nameContainer1 = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name-singleSelect\").text(\"Select to edit\");\n        let fieldContainer1 = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container-singleSelect\");\n        field.root.find(\".plate-setup-tab-field-right-side\").append(nameContainer1, fieldContainer1);\n\n        field.singleSelect = this._createElement(\"<select/>\").attr(\"id\", field.full_id + \"SingleSelect\")\n          .addClass(\"plate-setup-tab-multiplex-single-select-field\");\n\n        field.singleSelect.appendTo(fieldContainer1);\n        let opts = {\n          allowClear: false,\n          placeholder: \"select\",\n          minimumResultsForSearch: 10,\n          data: []\n        };\n        field.singleSelect.select2(opts);\n        select2fix(field.singleSelect);\n\n        let multiselectSetValue = field.setValue;\n\n        field.singleSelectValue = function() {\n          let v = field.singleSelect.val();\n          if (v === \"\") {\n            return null;\n          }\n          if (v == null) {\n            return null;\n          }\n          if (v == '[ALL]') {\n            return v;\n          }\n          return field._parseOne(v)\n        };\n\n        let setSingleSelectOptions = function(data, selected) {\n          data = data || [];\n\n          if (field.allSelectedMultipleVal) {\n            const count = Object.values(field.allSelectedMultipleVal).reduce(function (a, b) {return a + b}, 0);\n            if (count) {\n              const all_option = {\n                id: '[ALL]',\n                text: `[${count} well ${field.data.name}]`,\n                forAll: true\n              }\n              data = [all_option].concat(data);\n            }\n          }\n\n          if (!selected) {\n            if (data.length) {\n              selected = data[0].id;\n            } else {\n              selected = null;\n            }\n          }\n          select2setData(field.singleSelect, data, selected);\n          field.singleSelect.prop(\"disabled\", data.length === 0);\n          field.singleSelect.trigger(\"change.select2\");\n        };\n\n        let singleSelectChange = function() {\n          let v = field.singleSelectValue();\n\n          field.updateSubFieldUnitOpts(v);\n\n          let curSubField = null;\n          if (v === '[ALL]') {\n            curSubField = field.allSelectedMultipleData;\n          } else {\n            let curData = field.detailData || [];\n            curData.forEach(function(val) {\n              if (val[field.id] === v) {\n                curSubField = val;\n              }\n            });\n          }\n\n          if (curSubField) {\n            // setvalue for subfield\n            field.subFieldList.forEach(function(subField) {\n              subField.isDisabled = false;\n              subField.setValue(curSubField[subField.id]);\n            });\n          } else {\n            field.subFieldList.forEach(function(subField) {\n              subField.isDisabled = true;\n              subField.setValue(null);\n            });\n          }\n          that.readOnlyHandler();\n        };\n\n        setSingleSelectOptions([]);\n        field.singleSelect.on(\"change.select2\", singleSelectChange);\n\n        field._changeMultiFieldValue = function(added, removed) {\n          let newSubFieldValue = {};\n          for (let i = 0; i < field.subFieldList.length; i++) {\n            let subFieldId = field.subFieldList[i].id;\n            newSubFieldValue[subFieldId] = null;\n          }\n\n          let val;\n          if (added) {\n            if (added.value) {\n              val = added.value;\n            } else {\n              newSubFieldValue[field.id] = added.id;\n              val = newSubFieldValue;\n            }\n            added = {\n              id: added.id,\n              value: val\n            };\n          }\n\n          if (removed) {\n            if (removed.value) {\n              val = removed.value;\n            } else {\n              newSubFieldValue[field.id] = removed.id;\n              val = newSubFieldValue;\n            }\n            removed = {\n              id: removed.id,\n              value: val\n            };\n          }\n\n          let data = {};\n          data[field.id] = {\n            multi: true,\n            added: added,\n            removed: removed\n          };\n          that._addAllData(data);\n        };\n\n        field.setValue = function(v) {\n          // used to keep track of initially loaded multiplex data\n          field.detailData = v;\n          let multiselectValues = null;\n          if (v && v.length) {\n            multiselectValues = v.map(val => val[field.id]);\n          }\n\n          multiselectSetValue(multiselectValues);\n          let newOptions = field.input.select2('data') || [];\n          setSingleSelectOptions(newOptions, field.singleSelectValue());\n          singleSelectChange();\n        };\n\n        field.disabled = function(bool) {\n          bool = field.isDisabled || bool;\n          field.input.prop(\"disabled\", bool);\n          field.subFieldList.forEach(function(subField) {\n            subField.disabled(bool);\n          });\n          if (bool) {\n            nameContainer1.text(\"Select to inspect\");\n          } else {\n            nameContainer1.text(\"Select to edit\");\n          }\n          return bool;\n        };\n\n        field.parseValue = function(value) {\n          let v = value;\n          if (v && v.length) {\n            v = v.map(function(opt) {\n              let valMap = {};\n              valMap[field.id] = opt[field.id];\n              for (let subFieldId in opt) {\n                if (opt.hasOwnProperty(subFieldId)) {\n                  field.subFieldList.forEach(function(subField) {\n                    if (subField.id === subFieldId) {\n                      valMap[subField.id] = subField.parseValue(opt[subFieldId]);\n                    }\n                  });\n                }\n              }\n              return valMap;\n            });\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        field.updateSubFieldUnitOpts = function(val) {\n          let curOpts;\n          field.data.options.forEach(function(opt) {\n            if (opt.id === val) {\n              curOpts = opt;\n            }\n          });\n          field.subFieldList.forEach(function(subField) {\n            if (subField.data.hasMultiplexUnit) {\n              if (curOpts && curOpts.hasOwnProperty(\"unitOptions\")) {\n                subField.setUnitOpts(curOpts.unitOptions[subField.id]);\n              } else {\n                subField.setUnitOpts(null);\n              }\n            }\n          })\n        };\n\n        field.multiOnChange = function(added, removed) {\n          field._changeMultiFieldValue(added, removed);\n          let v = field.getValue();\n          let curData = field.detailData;\n          let curIds = [];\n          let curOpt = null;\n          //reshape data for saveback\n          if (curData) {\n            curIds = curData.map(val => val[field.id]);\n          }\n\n          let newMultiplexVal = [];\n          let selectList = [];\n          if (v) {\n            v.forEach(function(selectedVal) {\n              if (curData) {\n                curData.forEach(function(val) {\n                  if (val[field.id] === selectedVal) {\n                    newMultiplexVal.push(val)\n                  }\n                });\n              }\n              // cases when adding new data\n              if (curIds.indexOf(selectedVal) < 0) {\n                let newVal = {};\n                newVal[field.id] = selectedVal;\n\n                field.updateSubFieldUnitOpts(selectedVal);\n                field.subFieldList.forEach(function(subfield) {\n                  // special handling for subfield which has multiplexUnit\n                  if (subfield.hasUnits) {\n                    if (subfield.data.hasMultiplexUnit) {\n                      subfield.disabled(false);\n                      field.data.options.forEach(function(opt) {\n                        if (opt.id === selectedVal) {\n                          let val = {\n                            value: null,\n                            unit: subfield.units[0]\n                          };\n                          newVal[subfield.id] = subfield.parseValue(val);\n                        }\n                      });\n                    } else {\n                      if (subfield.data.units) {\n                        if (subfield.data.units.length > 1) {\n                          subfield.disabled(false);\n                        }\n                      }\n                      let val = {\n                        value: null,\n                        unit: subfield.defaultUnit\n                      };\n                      newVal[subfield.id] = subfield.parseValue(val);\n                    }\n                  } else {\n                    newVal[subfield.id] = subfield.parseValue(null);\n                  }\n                });\n                newMultiplexVal.push(newVal);\n              }\n            });\n\n            // make data for single select options\n            v.forEach(function(selectVal) {\n              field.data.options.forEach(function(opt) {\n                if (opt.id === selectVal) {\n                  selectList.push(opt);\n                }\n              });\n            });\n\n            let selected = field.singleSelectValue();\n            for (let i = 0; i < v.length; i++) {\n              if (added && (added.id === v[i])) {\n                curOpt = v[i];\n                break;\n              } else if (i === 0) {\n                curOpt = v[i];\n              } else if (v[i] === selected) {\n                curOpt = v[i];\n              }\n            }\n          }\n\n          field.detailData = newMultiplexVal;\n          setSingleSelectOptions(selectList, curOpt);\n          singleSelectChange();\n        };\n\n        field.getText = function(v) {\n          if (v === null) {\n            return \"\";\n          }\n          // get subfields that is selected from the checkbox\n          if (field.id in that.globalSelectedMultiplexSubfield) {\n            let checkedSubfields = that.globalSelectedMultiplexSubfield[field.id];\n            let returnVal = [];\n            for (let valIdx in v) {\n              if (!v.hasOwnProperty(valIdx)) {\n                continue;\n              }\n              let subV = v[valIdx];\n              let subText = [];\n              for (let optId in field.data.options) {\n                if (field.data.options.hasOwnProperty(optId)) {\n                  let opt = field.data.options[optId];\n                  if (opt.id === subV[field.id]) {\n                    subText.push(opt.text);\n                  }\n                }\n              }\n              field.subFieldList.forEach(function(subField) {\n                if (checkedSubfields.indexOf(subField.id) >= 0) {\n                  let x = subField.getText(subV[subField.id]);\n                  subText.push(subField.name + \": \" + x);\n                }\n              });\n              returnVal.push(\"{\" + subText.join(\", \") + \"}\");\n            }\n            return returnVal.join(\";\");\n          }\n        };\n\n        field.parseText = function(v) {\n          if (v === null) {\n            return \"\";\n          } else {\n            let returnVal = [];\n            for (let valIdx in v) {\n              if (!v.hasOwnProperty(valIdx)) {\n                continue;\n              }\n              let subV = v[valIdx];\n              let subText = [];\n              for (let optId in field.data.options) {\n                if (field.data.options.hasOwnProperty(optId)) {\n                  let opt = field.data.options[optId];\n                  if (opt.id === subV[field.id]) {\n                    subText.push(opt.text);\n                  }\n                }\n              }\n              field.subFieldList.forEach(function(subField) {\n                let x = subField.getText(subV[subField.id]);\n                if (x) {\n                  subText.push(x);\n                }\n              });\n              returnVal.push(subText);\n            }\n            return returnVal;\n          }\n        };\n\n        field.checkMultiplexCompletion = function(valList) {\n          let valCount = 0;\n          let completionPct = 0;\n          let include = false;\n\n          function getSubfieldStatus(vals) {\n            let req = 0;\n            let fill = 0;\n            for (let subFieldId in field.subFieldList) {\n              if (!field.subFieldList.hasOwnProperty(subFieldId)) {\n                continue;\n              }\n              let subField = field.subFieldList[subFieldId];\n              let curVal = vals[subField.id];\n              if (subField.required) {\n                include = true;\n                req++;\n                if (typeof curVal === 'object' && curVal) {\n                  if (curVal.value) {\n                    fill++;\n                  }\n                } else if (curVal) {\n                  fill++;\n                }\n              }\n            }\n            return fill / req;\n          }\n\n          // for cases has value in multiplex field\n          if (valList) {\n            if (valList.length > 0) {\n              for (let idx in valList) {\n                if (valList.hasOwnProperty(idx)) {\n                  valCount++;\n                  let vals = valList[idx];\n                  completionPct += getSubfieldStatus(vals);\n                }\n              }\n            } else if (field.required) {\n              include = true;\n              valCount = 1;\n            }\n          } else if (field.required) {\n            include = true;\n            valCount = 1;\n          }\n\n          return {\n            include: include,\n            completionPct: completionPct / valCount\n          };\n        };\n\n        // valList contains all of the vals for selected val\n        field.applyMultiplexSubFieldColor = function(valList) {\n          function updateSubFieldWarningMap(vals) {\n            for (let subFieldId in field.subFieldList) {\n              if (!field.subFieldList.hasOwnProperty(subFieldId)) {\n                continue;\n              }\n              let subField = field.subFieldList[subFieldId];\n              // loop through each well's multiplexval list\n              if (vals === null) {\n                if (field.required && subField.required) {\n                  subFieldWarningMap[subField.id].warningStatus.push(true);\n                }\n              } else if (typeof (vals) === \"object\") {\n                if (vals.length === 0) {\n                  if (field.required && subField.required) {\n                    subFieldWarningMap[subField.id].warningStatus.push(true);\n                  }\n                } else {\n                  for (let multiplexIdx in vals) {\n                    if (!vals.hasOwnProperty(multiplexIdx)) {\n                      continue;\n                    }\n                    let curVal = vals[multiplexIdx][subField.id];\n                    if (subField.required) {\n                      if (typeof (curVal) === 'object' && curVal) {\n                        if (!curVal.value) {\n                          subFieldWarningMap[subField.id].warningStatus.push(true);\n                        } else {\n                          subFieldWarningMap[subField.id].warningStatus.push(false);\n                        }\n                      } else if (!curVal) {\n                        subFieldWarningMap[subField.id].warningStatus.push(true);\n                      } else {\n                        subFieldWarningMap[subField.id].warningStatus.push(false);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          let subFieldWarningMap = {};\n          field.subFieldList.forEach(function(subField) {\n            if (subField.required) {\n              subFieldWarningMap[subField.id] = {\n                field: subField,\n                warningStatus: []\n              };\n            }\n          });\n\n          valList.forEach(function(multiplexVals) {\n            updateSubFieldWarningMap(multiplexVals);\n          });\n          // turn off main field when all subfield are filled\n\n          let mainFieldStatus = [];\n          for (let subFieldId in subFieldWarningMap) {\n            if (!subFieldWarningMap.hasOwnProperty(subFieldId)) {\n              continue;\n            }\n            let subField = subFieldWarningMap[subFieldId].field;\n            if (subFieldWarningMap[subFieldId].warningStatus.indexOf(true) >= 0) {\n              let text = subField.name + \" is a required subfield for \" + field.name + \", please make sure all \" + field.name + \" have \" + subField.name;\n              if (field.required) {\n                that.fieldWarningMsg(subField, text, true);\n                mainFieldStatus.push(true);\n              } else {\n                that.fieldWarningMsg(subField, text, true);\n                mainFieldStatus.push(true);\n              }\n            } else {\n              that.fieldWarningMsg(subField, \"none\", false);\n              mainFieldStatus.push(false);\n            }\n          }\n          let mainFieldWarning = mainFieldStatus.indexOf(true) >= 0;\n          let warningText;\n          if (field.required) {\n            warningText = field.name + \" is a required field, please also fix missing required subfield(s) below\";\n          } else {\n            warningText = field.name + \" is not a required field, please fix missing required subfield(s) below or remove selected \" + field.name;\n          }\n          that.fieldWarningMsg(field, warningText, mainFieldWarning);\n        };\n\n        field.parseMainFieldVal = function(val) {\n          let optMap = field.data.options;\n          for (let idx = 0; idx < optMap.length; idx++) {\n            let curOpt = optMap[idx];\n            if (curOpt.id === val) {\n              return curOpt.text\n            }\n          }\n        };\n      },\n\n      _deleteDialog: function(field) {\n        let that = this;\n\n        let valMap = field.allSelectedMultipleVal;\n        let valToRemove;\n        if (valMap) {\n          valToRemove = Object.keys(valMap);\n        } else {\n          valToRemove = [];\n        }\n\n\n        let dialogDiv = $(\"<div/>\").addClass(\"plate-modal\");\n        this.container.append(dialogDiv);\n\n        function killDialog() {\n          dialogDiv.hide();\n          dialogDiv.remove();\n        }\n\n        let dialogContent = $(\"<div/>\").addClass(\"plate-modal-content\").css('width', '550px').appendTo(dialogDiv);\n        let tableArea = $(\"<div/>\").appendTo(dialogContent);\n        let buttonRow = $(\"<div/>\").addClass(\"dialog-buttons\").css(\"justify-content\", \"flex-end\").appendTo(dialogContent);\n\n        if (valToRemove.length > 0) {\n          // apply CSS property for table\n          $(\"<p/>\").text(field.name + \" in selected wells: choose items to delete and click the delete button below\").appendTo(tableArea);\n\n          let table = that._deleteDialogTable(field, valMap);\n          table.appendTo(tableArea);\n          table.addClass(\"plate-popout-table\");\n          table.find('td').addClass(\"plate-popout-td\");\n          table.find('th').addClass(\"plate-popout-th\");\n          table.find('tr').addClass(\"plate-popout-tr\");\n          if (!that.readOnly) {\n            let deleteCheckedButton = $(\"<button class='multiple-field-manage-delete-button'>Delete Checked Items</button>\");\n            buttonRow.append(deleteCheckedButton);\n            deleteCheckedButton.click(function() {\n              table.find(\"input:checked\").each(function() {\n                let val = this.value;\n                field.multiOnChange(null, {id: val});\n              });\n              // refresh selected fields after updating the multiplex field value\n              that.decideSelectedFields();\n              killDialog();\n            });\n          }\n\n        } else {\n          $(\"<p/>\").text(\"No \" + field.name + \" in the selected wells\").appendTo(tableArea);\n        }\n\n        let cancelButton = $(\"<button>Cancel</button>\");\n        buttonRow.append(cancelButton);\n        cancelButton.click(killDialog);\n\n        dialogDiv.show();\n\n        window.onclick = function(event) {\n          if (event.target === dialogDiv[0]) {\n            killDialog();\n          }\n        }\n      },\n\n      _deleteDialogTable: function(field, valMap) {\n        let that = this;\n        let colName = [field.name, \"Counts\"]; //Added because it was missing... no idea what the original should have been\n        if (!that.readOnly) {\n          colName.push(\"Delete\");\n        }\n        let table = $('<table/>');\n        let thead = $('<thead/>').appendTo(table);\n        let tr = $('<tr/>').appendTo(thead);\n\n        tr.append(colName.map(function(text) {\n          return $('<th/>').text(text);\n        }));\n\n        let tbody = $(\"<tbody/>\").appendTo(table);\n\n        field.data.options.forEach(function(opt) {\n          if (opt.id in valMap) {\n            let tr = $('<tr/>').appendTo(tbody);\n            let checkbox = $(\"<input type='checkbox'>\").prop(\"value\", opt.id);\n            $(\"<td/>\").text(opt.text).appendTo(tr);\n            $(\"<td/>\").text(valMap[opt.id]).appendTo(tr);\n            if (!that.readOnly) {\n              $(\"<td/>\").append(checkbox).appendTo(tr);\n            }\n          }\n        });\n\n        return table;\n      },\n\n      _createDeleteButton: function(field) {\n        let that = this;\n        let deleteButton = $(\"<button/>\").addClass(\"plate-setup-remove-all-button\");\n        deleteButton.id = field.id + \"Delete\";\n        deleteButton.text(\"Manage \" + field.name + \"...\");\n        let buttonContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-remove-all-button-container\");\n        buttonContainer.append(deleteButton);\n\n        field.deleteButton = deleteButton;\n        field.root.find(\".plate-setup-tab-field-right-side\").append(buttonContainer);\n\n        deleteButton.click(function() {\n          that._deleteDialog(field);\n        });\n      }\n\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.engine = function(THIS) {\n    // Methods which look after data changes and stack up accordingly\n    // Remember THIS points to plateMapWidget and 'this' points to engine\n    // Use THIS to refer parent this.\n    return {\n      engine: {\n\n        derivative: {},\n        colorMap: new Map(),\n        stackUpWithColor: {},\n        stackPointer: 2,\n\n        wellEmpty: function(well) {\n          for (let prop in well) {\n            if (!well.hasOwnProperty(prop)) {\n              continue;\n            }\n            let curVal = well[prop];\n            if (curVal !== null && curVal !== undefined) {\n              if (Array.isArray(curVal)) {\n                if (curVal.length > 0) {\n                  return false;\n                }\n              } else {\n                return false;\n              }\n            }\n          }\n          return true;\n        },\n\n        searchAndStack: function() {\n          // This method search and stack the change we made.\n          this.stackUpWithColor = {};\n          this.stackPointer = 1;\n          let derivativeJson = {};\n          for (let idx in this.derivative) {\n            if (!this.derivative.hasOwnProperty(idx)) {\n              continue;\n            }\n            let data = this.derivative[idx];\n            let wellData = {};\n            for (let i = 0; i < THIS.globalSelectedAttributes.length; i++) {\n              let attr = THIS.globalSelectedAttributes[i];\n\n              if (attr in THIS.globalSelectedMultiplexSubfield) {\n                let selectedSubFields = THIS.globalSelectedMultiplexSubfield[attr];\n                let newMultiplexVal = [];\n                for (let multiplexIdx in data[attr]) {\n                  if (!data[attr].hasOwnProperty(multiplexIdx)) {\n                    continue;\n                  }\n                  let curMultiplexVals = data[attr][multiplexIdx];\n                  let newVal = {};\n                  newVal[attr] = curMultiplexVals[attr];\n                  selectedSubFields.forEach(function(subFieldId) {\n                    newVal[subFieldId] = curMultiplexVals[subFieldId];\n                  });\n                  newMultiplexVal.push(newVal);\n                }\n                wellData[attr] = newMultiplexVal;\n              } else {\n                if (data[attr] != null) {\n                  wellData[attr] = data[attr];\n                }\n              }\n            }\n            if ($.isEmptyObject(wellData)) {\n              derivativeJson[idx] = null;\n            } else {\n              derivativeJson[idx] = JSON.stringify(wellData);\n            }\n          }\n\n          while (!$.isEmptyObject(derivativeJson)) {\n            let keys = Object.keys(derivativeJson).map(parseFloat);\n            keys.sort(function(a, b) {\n              return a - b;\n            });\n\n            let refDerivativeIndex = keys[0];\n            let referenceDerivative = derivativeJson[refDerivativeIndex];\n            let arr = [];\n\n            if (!referenceDerivative) {\n              // if no checked box has value, push it to first spot\n              if (this.stackUpWithColor[0]) {\n                this.stackUpWithColor[0].push(refDerivativeIndex);\n              } else {\n                this.stackUpWithColor[0] = [refDerivativeIndex];\n              }\n\n              delete derivativeJson[refDerivativeIndex];\n            } else {\n              // if checked boxes have values\n              for (let i = 0; i < keys.length; i++) {\n                let idx = keys[i];\n                if (referenceDerivative === derivativeJson[idx]) {\n                  arr.push(idx);\n                  this.stackUpWithColor[this.stackPointer] = arr;\n                  delete derivativeJson[idx];\n                }\n              }\n              if (arr.length > 0)\n                this.stackPointer++;\n            }\n          }\n        },\n\n        applyColors: function() {\n\n          let wholeNoTiles = 0;\n          let wholePercentage = 0;\n\n          THIS.addBottomTableHeadings();\n\n          for (let i = 0; i < THIS.allTiles.length; i++) {\n            let tile = THIS.allTiles[i];\n            THIS.setTileVisible(tile, false);\n          }\n\n          for (let color = 0; color < this.stackPointer; color++) {\n            let arr = this.stackUpWithColor[color];\n            if (arr) {\n              THIS.addBottomTableRow(color, arr);\n\n              for (let i = 0; i < arr.length; i++) {\n                wholeNoTiles++;\n                let index = this.stackUpWithColor[color][i];\n                let tile = THIS.allTiles[index];\n                let well = this.derivative[index];\n                this.colorMap.set(index, color);\n                THIS.setTileColor(tile, color);\n                // Checks if all the required fields are filled\n                let completion = this.checkCompletion(well, tile);\n                THIS.setTileComplete(tile, completion === 1);\n                wholePercentage = wholePercentage + completion;\n              }\n            }\n          }\n\n          wholePercentage = Math.floor(100 * wholePercentage / wholeNoTiles);\n\n          if (isNaN(wholePercentage)) {\n            THIS.overLayTextContainer.text(\"Completion Percentage: 0%\");\n          } else {\n            THIS.overLayTextContainer.text(\"Completion Percentage: \" + wholePercentage + \"%\");\n          }\n          THIS.selectObjectInBottomTab();\n        },\n\n        checkCompletion: function(wellData) {\n          let req = 0;\n          let fill = 0;\n          for (let i = 0; i < THIS.fieldList.length; i++) {\n            let field = THIS.fieldList[i];\n            if (field.checkMultiplexCompletion) {\n              // also apply color\n              let multiplexStatus = field.checkMultiplexCompletion(wellData[field.id]);\n              if (multiplexStatus.include) {\n                fill += multiplexStatus.completionPct;\n                req++;\n              }\n            } else {\n              if (field.required) {\n                req++;\n                if (wellData[field.id] !== null) {\n                  fill++;\n                }\n              }\n            }\n          }\n          if (req === fill) {\n            return 1;\n          }\n          return fill / req;\n        },\n      }\n    }\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\nplateMapWidget.assets = function() {\n  return {\n    _assets: {\n      doImg: '&#10003;',\n      dontImg: '',\n      warningImg: '&#9888;'\n    }\n  };\n};\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.interface = function() {\n    // interface holds all the methods to put the interface in place\n    return {\n\n      _createInterface: function() {\n\n        let divIdentifier = '<div></div>';\n        this.container = this._createElement(divIdentifier).addClass(\"plate-setup-wrapper\");\n        this.topSection = this._createElement(divIdentifier).addClass(\"plate-setup-top-section\");\n\n        this.topLeft = this._createElement(divIdentifier).addClass(\"plate-setup-top-left\");\n        this.topRight = this._createElement(divIdentifier).addClass(\"plate-setup-top-right\");\n\n        this.overLayContainer = this._createElement(divIdentifier).addClass(\"plate-setup-overlay-container\");\n        this.canvasContainer = this._createElement(divIdentifier).addClass(\"plate-setup-canvas-container\");\n\n        this._createOverLay();\n        $(this.topLeft).append(this.overLayContainer);\n        $(this.topLeft).append(this.canvasContainer);\n\n        $(this.topSection).append(this.topLeft);\n        $(this.topSection).append(this.topRight);\n\n        $(this.container).append(this.topSection);\n        $(this.element).append(this.container);\n\n        this._createSvg();\n\n        this._createTabAtRight();\n        this._createTabs();\n\n        this._placePresetTabs();\n        // Bottom of the screen\n        this._bottomScreen();\n\n        this.bottomForFirstTime();\n\n        let that = this;\n        this._setShortcuts();\n        $(document.body).keyup(function(e) {\n          that._handleShortcuts(e);\n        });\n\n        this._configureUndoRedoArray();\n      },\n\n      _createElement: function(element) {\n        return $(element);\n      },\n\n      _setShortcuts: function() {\n        let that = this;\n        window.addEventListener(\"cut\", function(e) {\n          if (document.activeElement === document.body) {\n            that.copyCriteria();\n            that.clearCriteria();\n            e.preventDefault();\n          }\n        });\n        window.addEventListener(\"copy\", function(e) {\n          if (document.activeElement === document.body) {\n            that.copyCriteria();\n            e.preventDefault();\n          }\n        });\n        window.addEventListener(\"paste\", function(e) {\n          if (document.activeElement === document.body) {\n            that.pasteCriteria();\n            e.preventDefault();\n          }\n        });\n      },\n\n      _handleShortcuts: function(e) {\n        if (document.activeElement === document.body) {\n          if (e.keyCode === 46) {\n            this.clearCriteria();\n            e.preventDefault();\n          } else if (e.ctrlKey || e.metaKey) {\n            if (e.keyCode === 90) {\n              if (e.shiftKey) {\n                this.redo();\n              } else {\n                this.undo();\n              }\n              e.preventDefault();\n            } else if (e.keyCode === 89) {\n              this.redo();\n              e.preventDefault();\n            }\n          }\n        }\n      },\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\nplateMapWidget.loadPlate = function() {\n  // Methods which look after data changes and stack up accordingly\n  // Remember THIS points to plateMapWidget and 'this' points to engine\n  return {\n\n    loadPlate: function(data) {\n      //sanitize input\n      let derivative;\n      if (data.hasOwnProperty('wells')) {\n        derivative = {};\n        for (let address in data.wells) {\n          let well = data.wells[address];\n          let index = this.addressToIndex(address);\n          derivative[index] = this.sanitizeWell(well);\n        }\n      } else {\n        derivative = this.engine.derivative;\n      }\n\n      let checkboxes;\n      if (data.hasOwnProperty('checkboxes')) {\n        checkboxes = this.sanitizeCheckboxes(data.checkboxes);\n      } else {\n        checkboxes = this.getCheckboxes();\n      }\n\n      let sanitized = {\n        \"derivative\": derivative,\n        \"checkboxes\": checkboxes\n      };\n\n      this.setData(sanitized);\n    },\n\n    sanitizeCheckboxes: function(checkboxes) {\n      checkboxes = checkboxes || [];\n      return this.allCheckboxes.filter(fieldId => checkboxes.indexOf(fieldId) >= 0);\n    },\n\n    sanitizeAddresses: function(selectedAddresses) {\n      selectedAddresses = selectedAddresses || [];\n      let indices = selectedAddresses.map(this.addressToIndex, this);\n      indices.sort();\n      indices = indices.filter((index, i) => indices.indexOf(index) === i);\n      return indices;\n    },\n\n    sanitizeWell: function(well) {\n      let newWell = {};\n      this.fieldList.forEach(function (field) {\n        newWell[field.id] = field.parseValue(well[field.id]);\n      });\n      return newWell;\n    },\n\n    setData: function(data, quiet) {\n      this.engine.derivative = data.derivative;\n      this.setCheckboxes(data.checkboxes, true);\n      this.setSelectedIndices(data.selectedIndices, true);\n      this.derivativeChange();\n      if (!quiet) {\n        this.addToUndoRedo();\n      }\n    },\n\n  }\n};\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.overlay = function() {\n    // overlay holds all the methods to put the part just above the canvas which contains all those\n    // 'completion percentage' annd 'copy Criteria' button etc ...\n    return {\n\n      _createOverLay: function() {\n\n        let that = this;\n        this.overLayTextContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-overlay-text-container\");\n        this.overLayTextContainer.text(\"Completion Percentage:\");\n        this.overLayContainer.append(this.overLayTextContainer);\n        this.overLayButtonContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-overlay-button-container\");\n        this.overLayContainer.append(this.overLayButtonContainer);\n\n        this.clearCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.clearCriteriaButton.text(\"Clear\");\n        this.overLayButtonContainer.append(this.clearCriteriaButton);\n\n        this.clearCriteriaButton.click(function() {\n          that.clearCriteria();\n        });\n\n        this.copyCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.copyCriteriaButton.text(\"Copy\");\n        this.overLayButtonContainer.append(this.copyCriteriaButton);\n\n        this.copyCriteriaButton.click(function() {\n          that.copyCriteria();\n        });\n\n        this.pasteCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.pasteCriteriaButton.text(\"Paste\");\n        this.overLayButtonContainer.append(this.pasteCriteriaButton);\n\n        this.pasteCriteriaButton.click(function() {\n          that.pasteCriteria();\n        });\n\n        this.undoButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.undoButton.text(\"Undo\");\n        this.overLayButtonContainer.append(this.undoButton);\n\n        this.undoButton.click(function() {\n          that.undo();\n        });\n\n        this.redoButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.redoButton.text(\"Redo\");\n        this.overLayButtonContainer.append(this.redoButton);\n\n        this.redoButton.click(function() {\n          that.redo();\n        });\n\n      },\n\n      clearCriteria: function() {\n        if (this.selectedIndices && this.selectedIndices.length) {\n          let hasWellUpdate = false;\n          let selectedIndices = this.selectedIndices;\n          let well;\n          for (let i = 0; i < selectedIndices.length; i++) {\n            let index = selectedIndices[i];\n            if (index in this.engine.derivative) {\n              // handling for clearing well when not allowed to add or delete wells\n              if (this.disableAddDeleteWell) {\n                if (this.engine.derivative.hasOwnProperty(index)) {\n                  well = $.extend(true, {}, this.emptyWellWithDefaultVal);\n                  this.engine.derivative[index] = well;\n                }\n              } else {\n                delete this.engine.derivative[index];\n              }\n              hasWellUpdate = true;\n            }\n          }\n\n          if (hasWellUpdate) {\n            this._colorMixer();\n            this.decideSelectedFields();\n            this.derivativeChange();\n            this.addToUndoRedo();\n          }\n        } else {\n          alert(\"Please select any well\");\n        }\n      },\n\n      copyCriteria: function() {\n        if (this.selectedIndices && this.selectedIndices.length) {\n          let wells = this._getSelectedWells();\n          this.commonData = this._getCommonData(wells);\n        } else {\n          alert(\"Please select any well.\");\n        }\n      },\n\n      pasteCriteria: function() {\n        if (this.commonData) {\n          this._addAllData(this.commonData);\n          this.decideSelectedFields();\n        }\n      }\n    };\n  }\n})(jQuery);","$.widget(\"DNA.plateMap\", {\n\n  plateMapWidget: {},\n\n  options: {\n    value: 0\n  },\n\n  addressToLoc: function(address) {\n    let m = /^([A-Z]+)(\\d+)$/.exec(address.trim().toUpperCase());\n    if (m) {\n      let row_v = m[1];\n      let col = parseInt(m[2]) - 1;\n      let row = 0;\n      for (let i = 0; i < row_v.length; i++) {\n        let c = row_v.charCodeAt(i) - 65;\n        if (i) {\n          row += 1;\n          row *= 26;\n          row += c;\n        } else {\n          row = c;\n        }\n      }\n      return {\n        r: row,\n        c: col\n      };\n    } else {\n      throw address + \" not a proper plate address\";\n    }\n  },\n\n  locToIndex: function(loc, dimensions) {\n    if (!dimensions) {\n      dimensions = this.dimensions;\n    }\n    if (!(loc.r >= 0 && loc.r < dimensions.rows)) {\n      throw \"Row index \" + (loc.r + 1) + \" invalid\";\n    }\n    if (!(loc.c >= 0 && loc.c < dimensions.cols)) {\n      throw \"Column index \" + (loc.c + 1) + \" invalid\";\n    }\n    return loc.r * dimensions.cols + loc.c;\n  },\n\n  addressToIndex: function(address, dimensions) {\n    let loc = this.addressToLoc(address);\n    return this.locToIndex(loc, dimensions);\n  },\n\n  _rowKey: function(i) {\n    let c1 = i % 26;\n    let c2 = (i - c1) / 26;\n    let code = String.fromCharCode(65 + c1);\n    if (c2 > 0) {\n      code = String.fromCharCode(64 + c2) + code;\n    }\n    return code;\n  },\n\n  _colKey: function (i) {\n    return (i+1).toString(10);\n  },\n\n  indexToLoc: function(index, dimensions) {\n    if (!dimensions) {\n      dimensions = this.dimensions;\n    }\n\n    if (index >= dimensions.rows * dimensions.cols) {\n      throw \"Index too high: \" + index.toString(10);\n    }\n    let loc = {};\n    loc.c = index % dimensions.cols;\n    loc.r = (index - loc.c) / dimensions.cols;\n\n    return loc;\n  },\n\n  locToAddress: function(loc) {\n    return this._rowKey(loc.r) + this._colKey(loc.c);\n  },\n\n  indexToAddress: function(index, dimensions) {\n    let loc = this.indexToLoc(index, dimensions);\n    return this.locToAddress(loc);\n  },\n\n  getDimensions: function() {\n    return $.extend(true, {}, this.dimensions);\n  },\n\n  _create: function() {\n    let rows = parseInt(this.options.numRows || 8);\n    let cols = parseInt(this.options.numCols || 12);\n    this.dimensions = {\n      rows: rows,\n      cols: cols\n    };\n    this.rowIndex = [];\n    for (let i = 0; i < rows; i++) {\n      this.rowIndex.push(this._rowKey(i));\n    }\n\n    this.target = (this.element[0].id) ? \"#\" + this.element[0].id : \".\" + this.element[0].className;\n\n    // Import classes from other files.. Here we import it using extend and add it to this\n    // object. internally we add to widget.DNA.getPlates.prototype.\n    // Helpers are methods which return other methods and objects.\n    // add Objects to plateMapWidget and it will be added to this object.\n    // set read only well\n    if (this.options.readOnly) {\n      this.isReadOnly(true);\n    }\n\n    for (let component in plateMapWidget) {\n      if (plateMapWidget.hasOwnProperty(component)) {\n        // Incase some properties has to initialize with data from options hash,\n        // we provide it sending this object.\n        $.extend(this, new plateMapWidget[component](this));\n      }\n    }\n\n    this._createInterface();\n\n    this._trigger(\"created\", null, this);\n\n    return this;\n  },\n\n  _init: function() {\n    // This is invoked when the user use the plugin after _create is called.\n    // The point is _create is invoked for the very first time and for all other\n    // times _init is used.\n  },\n\n  // wellsData follows syntax: {A1:{field1: val1, field2: val2}, A2:{field1: val1, field2: val2}}\n  getTextDerivative: function(wellsData) {\n    let textDerivative = {};\n    let fieldMap = this.fieldMap;\n    for (let address in wellsData) {\n      if (!wellsData.hasOwnProperty(address)) {\n        continue;\n      }\n      let textValWell = {};\n      let textFieldIdWell = {};\n      let curWellData = wellsData[address];\n      for (let fieldId in curWellData) {\n        if (!curWellData.hasOwnProperty(fieldId)) {\n          continue;\n        }\n        if (fieldId in fieldMap) {\n          let field = fieldMap[fieldId];\n          let textVal = field.parseText(curWellData[fieldId]);\n          textFieldIdWell[field.name] = textVal;\n          textValWell[fieldId] = textVal;\n        } else {\n          // do not convert if not a field\n          textFieldIdWell[fieldId] = curWellData[fieldId];\n          textValWell[fieldId] = curWellData[fieldId];\n        }\n      }\n      textDerivative[address] = {\n        textVal: textValWell,\n        textFieldVal: textFieldIdWell\n      };\n    }\n\n    return textDerivative;\n  },\n\n  // wellsData follows syntax: {A1:{field1: val1, field2: val2}, A1:{field1: val1, field2: val2}}\n  getWellsDifferences: function(wellsHash) {\n    let wells = [];\n    for (let wellId in wellsHash) {\n      if (wellsHash.hasOwnProperty(wellId)) {\n        wells.push(wellsHash[wellId]);\n      }\n    }\n    let differentWellsVals = {};\n    if (wells.length > 1) {\n      let commonWell = this._getCommonWell(wells);\n      let allFieldVal = {};\n      for (let fieldIdx in wells[0]) {\n        if (wells[0].hasOwnProperty(fieldIdx)) {\n          allFieldVal[fieldIdx] = [];\n        }\n      }\n      for (let address in wellsHash) {\n        if (!wellsHash.hasOwnProperty(address)) {\n          continue;\n        }\n        let diffWellVal = {};\n        let curWellData = wellsHash[address];\n        for (let fieldId in curWellData) {\n          if (!curWellData.hasOwnProperty(fieldId)) {\n            continue;\n          }\n          let commonVal = commonWell[fieldId];\n          let curVal = curWellData[fieldId];\n          if (commonVal === undefined) {\n            commonVal = null;\n          }\n          if (curVal === undefined) {\n            curVal = null;\n          }\n          let newVal = null;\n          if (Array.isArray(curVal)) {\n            commonVal = commonVal || [];\n            // get uncommonVal\n            newVal = [];\n            for (let idx = 0; idx < curVal.length; idx++) {\n              let curMultiVal = curVal[idx];\n              // multiplex field\n              if (curMultiVal && typeof (curMultiVal) === \"object\") {\n                if (!this.containsObject(curMultiVal, commonVal)) {\n                  newVal.push(curMultiVal);\n                  if (!this.containsObject(curMultiVal, allFieldVal[fieldId])) {\n                    allFieldVal[fieldId].push(curMultiVal);\n                  }\n                }\n              } else {\n                if (commonVal.indexOf(curMultiVal) < 0) {\n                  newVal.push(curMultiVal);\n                  if (!allFieldVal[fieldId].indexOf(curMultiVal) >= 0) {\n                    allFieldVal[fieldId].push(curMultiVal);\n                  }\n                }\n              }\n            }\n          } else if (curVal && typeof (curVal) === \"object\") {\n            if (commonVal && typeof (commonVal) === \"object\") {\n              if (!((curVal.value === commonVal.value) || (curVal.unit === commonVal.unit))) {\n                newVal = curVal;\n                if (!this.containsObject(curVal, allFieldVal[fieldId])) {\n                  allFieldVal[fieldId].push(curVal);\n                }\n              }\n            } else {\n              newVal = curVal;\n              if (!this.containsObject(curVal, allFieldVal[fieldId])) {\n                allFieldVal[fieldId].push(curVal);\n              }\n            }\n          } else if (curVal !== commonVal) {\n            newVal = curVal;\n            if (!allFieldVal[fieldId].indexOf(curVal) >= 0) {\n              allFieldVal[fieldId].push(curVal);\n            }\n          }\n          diffWellVal[fieldId] = newVal;\n        }\n\n        differentWellsVals[address] = diffWellVal;\n      }\n\n      // clean up step for fields that are empty\n      for (let fieldId in allFieldVal) {\n        if (!allFieldVal.hasOwnProperty(fieldId)) {\n          continue;\n        }\n        if (allFieldVal[fieldId].length === 0) {\n          for (let address in differentWellsVals) {\n            if (!differentWellsVals.hasOwnProperty(address)) {\n              continue;\n            }\n            delete differentWellsVals[address][fieldId];\n          }\n        }\n      }\n\n      return differentWellsVals;\n    } else if (wells.length > 0) {\n      let differentWellsVals = {};\n      for (let address in wellsHash) {\n        if (!wellsHash.hasOwnProperty(address)) {\n          continue;\n        }\n        let diffWellVal = {};\n        let curWellData = wellsHash[address];\n        for (let fieldId in curWellData) {\n          if (!curWellData.hasOwnProperty(fieldId)) {\n            continue;\n          }\n          let curVal = curWellData[fieldId];\n          if (Array.isArray(curVal)) {\n            if (curVal.length > 0) {\n              diffWellVal[fieldId] = curVal\n            }\n          } else if (curVal) {\n            diffWellVal[fieldId] = curVal;\n          }\n        }\n        differentWellsVals[address] = diffWellVal;\n      }\n\n      return differentWellsVals;\n    }\n  },\n\n  setFieldsDisabled: function(flag) {\n    this.fieldList.forEach(function(field) {\n      field.disabled(flag);\n    });\n  },\n\n  isReadOnly: function(flag) {\n    this.readOnly = !!flag;\n    this.readOnlyHandler();\n  },\n\n  readOnlyHandler: function() {\n    if (this.readOnly) {\n      this.overLayButtonContainer.css(\"display\", \"none\");\n      $('.multiple-field-manage-delete-button').css(\"display\", \"none\");\n      this.setFieldsDisabled(true);\n    } else {\n      this.overLayButtonContainer.css(\"display\", \"flex\");\n      $('.multiple-field-manage-delete-button').css(\"display\", \"none\");\n      if (!this.disableAddDeleteWell) {\n        this.setFieldsDisabled(false);\n      }\n    }\n  },\n\n  disableAddDeleteWell: null,\n\n  // column_with_default_val will be used to determine empty wells, format: {field_name: default_val}\n  isDisableAddDeleteWell: function(flag, emptyDefaultWell) {\n    if (flag) {\n      let emptyWellWithDefaultVal = $.extend(true, {}, this.defaultWell);\n      if (emptyDefaultWell) {\n        for (let field in emptyDefaultWell) {\n          if (emptyDefaultWell.hasOwnProperty(field)) {\n            if (field in emptyWellWithDefaultVal) {\n              emptyWellWithDefaultVal[field] = emptyDefaultWell[field]\n            } else {\n              console.log(\"No field for key: \" + key + \", please contact support\");\n            }\n          }\n        }\n      }\n      this.disableAddDeleteWell = true;\n      this.addressAllowToEdit = this.getWellSetAddressWithData();\n      // configure undo redo action\n      this.actionPointer = 0;\n      this.undoRedoArray = [this.createState()];\n      this.emptyWellWithDefaultVal = emptyWellWithDefaultVal;\n    } else {\n      this.disableAddDeleteWell = false;\n      this.emptyWellWithDefaultVal = null;\n    }\n    this.readOnlyHandler();\n  },\n\n  selectObjectInBottomTab: function() {\n    let colors = [];\n    let selectedIndices = this.selectedIndices;\n    for (let i = 0; i < selectedIndices.length; i++) {\n      let index = selectedIndices[i];\n      let well = this.engine.derivative[index];\n      if (well) {\n        let color = this.engine.colorMap.get(index);\n        if (colors.indexOf(color) < 0) {\n          colors.push(color);\n        }\n      }\n    }\n    let trs = document.querySelectorAll('table.plate-setup-bottom-table tr');\n    for (let i = 1; i < trs.length; i++) { // start at 1 to skip the table headers\n      let tr = trs[i];\n      let td = tr.children[0];\n      let isSelected = colors.indexOf(Number(td.querySelector('button').innerHTML)) >= 0;\n      tr.classList.toggle(\"selected\", isSelected);\n    }\n  },\n\n  getSelectedIndices: function() {\n    return this.selectedIndices.slice();\n  },\n\n  getSelectedAddresses: function() {\n    return this.selectedIndices.map(function(index) {\n      return this.allTiles[index].address;\n    }, this);\n  },\n\n  setSelectedAddresses: function(addresses, noUndoRedo) {\n    let indices = this.sanitizeAddresses(addresses);\n    this.setSelectedIndices(indices, noUndoRedo);\n  },\n\n  setSelectedIndices: function (indices, noUndoRedo) {\n    if (!indices || indices.length === 0) {\n      indices = [0];\n    }\n    // Indices should be sanitized\n    this.setSelection(indices);\n    //this._colorMixer();\n    this.decideSelectedFields();\n    this._trigger(\"selectedWells\", null, {selectedAddress: this.getSelectedAddresses()});\n    this.selectObjectInBottomTab();\n    if (!noUndoRedo) {\n      this.addToUndoRedo();\n    }\n  }\n\n});\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.preset = function() {\n    // All the preset action goes here\n    return {\n\n      presets: [],\n\n      _placePresetTabs: function() {\n        let presets = this.options.attributes.presets;\n\n        if (presets && presets.length) {\n          this.wellAttrContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-well-attr-container\")\n            .text(\"Checkbox presets\");\n          this.tabContainer.append(this.wellAttrContainer);\n\n          this.presetTabContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-preset-container\");\n          this.tabContainer.append(this.presetTabContainer);\n\n          for (let i = 0; i < presets.length; i++) {\n            let preset = presets[i];\n            let divText = this._createElement(\"<div></div>\").addClass(\"plate-setup-preset-tab-div\")\n              .text(preset.title);\n\n            let presetButton = this._createElement(\"<div></div>\").addClass(\"plate-setup-preset-tab\")\n              .data(\"preset\", preset.fields).append(divText);\n            this.presetTabContainer.append(presetButton);\n\n            let that = this;\n            presetButton.click(function() {\n              let preset = $(this);\n              that._selectPreset(preset);\n            });\n            this.presets.push(presetButton);\n          }\n        }\n      },\n\n      _clearPresetSelection: function() {\n        for (let j = 0; j < this.presets.length; j++) {\n          let p = this.presets[j];\n          p.removeClass(\"plate-setup-preset-tab-selected\")\n            .addClass(\"plate-setup-preset-tab\");\n        }\n      },\n\n      _selectPreset: function(preset) {\n        this.setCheckboxes(preset.data(\"preset\"));\n        preset.removeClass(\"plate-setup-preset-tab\")\n          .addClass(\"plate-setup-preset-tab-selected\");\n      },\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function(SVG) {\n\n  plateMapWidget.svgCreate = function() {\n    //\n    return {\n\n      baseSizes: {\n        spacing: 48,\n        tile_radius: 22,\n        center_radius_complete: 10,\n        center_radius_incomplete: 14,\n        label_size: 14,\n        label_spacing: 24,\n        text_size: 13,\n        stroke: 0.5,\n        gap: 2\n      },\n\n      allTiles: [],\n\n      _createSvg: function() {\n        this.svg = new SVG(this.canvasContainer[0]);\n        this.svg.attr('preserveAspectRatio', 'xMidYMin meet');\n        let ls = this.baseSizes.label_spacing;\n\n        this.svg.viewbox(-ls, -ls, ls + this.dimensions.cols * this.baseSizes.spacing, ls + this.dimensions.rows * this.baseSizes.spacing);\n\n        this.wellShadow = this.svg.gradient('radial', function (stop) {\n          stop.at(0.8, 'rgba(0,0,0,0.1)');\n          stop.at(1, 'rgba(0,0,0,0.2)');\n        }).from(\"50%\", \"50%\").to(\"50%\", \"55%\").radius(\"50%\").attr('id', 'wellShadow');\n\n        this.wellColors = this.colorPairs.map(function (pair, i) {\n            return this.svg.gradient('linear', function (stop) {\n                stop.at(0, pair[0]);\n                stop.at(1, pair[1]);\n            }).from(0, 0).to(0, 1).id('wellColor' + i.toString());\n        }, this);\n\n        this._fixRowAndColumn();\n        this._putCircles();\n        this._svgEvents();\n      },\n\n      _fixRowAndColumn: function () {\n        let cols = this.dimensions.cols;\n        let rows = this.dimensions.rows;\n\n        let rh = this.svg.nested().attr({'x': -this.baseSizes.label_spacing / 2.0}).addClass('rowHead');\n        let ch = this.svg.nested().attr({'y': -this.baseSizes.label_spacing / 2.0}).addClass('colHead');\n\n        for (let i = 0; i < rows; i++) {\n          rh.plain(this._rowKey(i)).attr({y: this.baseSizes.spacing * (i + 0.5)});\n        }\n        for (let i = 0; i < cols; i++) {\n          ch.plain(this._colKey(i)).attr({x: this.baseSizes.spacing * (i + 0.5)});\n        }\n      },\n\n      _putCircles: function () {\n        let cols = this.dimensions.cols;\n        let rows = this.dimensions.rows;\n        this.allTiles = Array(cols * rows);\n\n        for (let row = 0; row < rows; row++) {\n          for (let col = 0; col < cols; col++) {\n            let tile = this._createTile(row, col);\n            this.allTiles[tile.index] = tile;\n          }\n        }\n      },\n\n      _createTile: function (r, c) {\n        let g = this.svg.nested().move(this.baseSizes.spacing * c, this.baseSizes.spacing * r).addClass('tile');\n        let m = this.baseSizes.spacing / 2.0;\n\n        let d = {\"tile\": g};\n        d.r = r;\n        d.c = c;\n        d.index = this.locToIndex(d);\n        d.address = this.locToAddress(d);\n\n        g.rect(this.baseSizes.spacing, this.baseSizes.spacing).addClass('highlight');\n        g.circle(this.baseSizes.tile_radius * 2).center(m, m).addClass('well').fill(this.wellShadow);\n\n        let tf = g.group().addClass('fill');\n        d[\"circle\"] = tf.circle(this.baseSizes.tile_radius * 2).center(m, m).addClass('circle').fill(this.wellColors[0]);\n        tf.circle(this.baseSizes.center_radius_complete * 2).center(m, m).addClass('center');\n        tf.circle(this.baseSizes.center_radius_incomplete * 2).center(m, m).addClass('center_incomplete');\n        d[\"label\"] = tf.plain(\"0\").attr({x: m, y: m}).addClass('label');\n\n        return d;\n      },\n\n      setTileComplete: function (tile, complete) {\n        if (complete) {\n          tile.tile.removeClass('incomplete');\n        } else {\n          tile.tile.addClass('incomplete');\n        }\n      },\n\n      setTileVisible: function (tile, visible) {\n        if (visible) {\n          tile.tile.removeClass('empty');\n        } else {\n          tile.tile.addClass('empty');\n        }\n      },\n\n      setTileColor: function (tile, color) {\n        this.setTileVisible(tile, true);\n        tile.colorIndex = parseInt(color);\n        tile.label.plain(String(tile.colorIndex));\n\n        if (color > 0) {\n          color = ((color - 1) % (this.wellColors.length - 1)) + 1;\n        }\n\n        tile.circle.fill(this.wellColors[color])\n      }\n    };\n  }\n})(SVG);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.svgEvents = function() {\n    // This object contains Menu items and how it works;\n    return {\n      colorToIndex: {},\n      selectedIndices: [],\n\n      _svgEvents: function() {\n        // Set up event handling.\n        let that = this;\n\n        function getMousePosition(evt) {\n          let CTM = that.svg.node.getScreenCTM();\n          return {\n            x: (evt.clientX - CTM.e) / CTM.a,\n            y: (evt.clientY - CTM.f) / CTM.d\n          };\n        }\n\n        function dimCoord(v, max) {\n          max = max - 1;\n          if (v < 0) {\n            return 0;\n          } else if (v >= max) {\n            return max;\n          } else {\n            return Math.trunc(v);\n          }\n        }\n\n        function posToLoc(pos) {\n          let s = that.baseSizes.spacing;\n          let c = dimCoord(pos.x / s, that.dimensions.cols);\n          let r = dimCoord(pos.y / s, that.dimensions.rows);\n          return {r: r, c: c}\n        }\n\n        function selectionBoxPosition(pos0, pos1) {\n          let d0 = posToLoc(pos0);\n          let d1 = posToLoc(pos1);\n          let s = that.baseSizes.spacing;\n\n          let x0 = Math.min(d0.c, d1.c) * s;\n          let y0 = Math.min(d0.r, d1.r) * s;\n\n          if (pos0.x < 0) {\n            d0.c = that.dimensions.cols - 1;\n          }\n          if (pos0.y < 0) {\n            d0.r = that.dimensions.rows - 1;\n          }\n\n          let x1 = (Math.max(d0.c, d1.c) + 1) * s;\n          let y1 = (Math.max(d0.r, d1.r) + 1) * s;\n\n          return {\n            x: x0,\n            y: y0,\n            width: x1 - x0,\n            height: y1 - y0,\n          };\n        }\n\n        function selectTiles(pos0, pos1, secondary) {\n          let d0 = posToLoc(pos0);\n          let d1 = posToLoc(pos1);\n          let extending = true;\n          if (secondary) {\n            // if d0 is already selected, we are deselecting\n            let startIdx = that.locToIndex(d0);\n            extending = that.selectedIndices.indexOf(startIdx) < 0;\n          }\n          let c0 = Math.min(d0.c, d1.c);\n          let r0 = Math.min(d0.r, d1.r);\n\n          if (pos0.x < 0) {\n            d0.c = that.dimensions.cols - 1;\n          }\n          if (pos0.y < 0) {\n            d0.r = that.dimensions.rows - 1;\n          }\n\n          let c1 = Math.max(d0.c, d1.c);\n          let r1 = Math.max(d0.r, d1.r);\n\n          let indices = [];\n\n          for (let r = r0; r <= r1; r++) {\n            for (let c = c0; c <= c1; c++) {\n              let index = that.locToIndex({'r': r, 'c': c});\n              indices.push(index)\n            }\n          }\n          if (secondary) {\n            if (extending) {\n              that.selectedIndices.forEach(function (index) {\n                if (indices.indexOf(index) < 0) {\n                  indices.push(index);\n                }\n              });\n            } else {\n              indices = that.selectedIndices.filter(index => indices.indexOf(index) < 0);\n            }\n          }\n\n          that.setSelectedIndices(indices.sort());\n        }\n\n        let selectionBox;\n\n        function startDrag(evt) {\n          if (selectionBox) {\n            selectionBox.remove();\n          }\n          let pos = getMousePosition(evt);\n          let attrs = selectionBoxPosition(pos, pos);\n          selectionBox = that.svg.rect().attr(attrs).fill('rgba(0, 0, 1, 0.2)');\n          selectionBox.data('origin', pos);\n        }\n\n        function drag(evt) {\n          if (selectionBox) {\n            let pos = getMousePosition(evt);\n            let attrs = selectionBoxPosition(selectionBox.data('origin'), pos);\n            selectionBox.attr(attrs);\n          }\n        }\n\n        function endDrag(evt) {\n          if (selectionBox) {\n            let startPos = selectionBox.data('origin');\n            let pos = getMousePosition(evt);\n            selectTiles(startPos, pos, evt.shiftKey);\n            selectionBox.remove();\n            selectionBox = null;\n          }\n        }\n\n        this.svg.node.addEventListener('mousedown', startDrag);\n        this.svg.node.addEventListener('mousemove', drag);\n        this.svg.node.addEventListener('mouseleave', endDrag);\n        this.svg.node.addEventListener('mouseup', endDrag);\n\n        $(that.target).on(\"loadPlate\", function(evt, data) {\n          // This method should be compatible to redo/undo.\n          that.loadPlate(JSON.parse(data));\n        });\n      },\n\n      setSelection: function(selectedIndices) {\n        this.selectedIndices = selectedIndices;\n        this._setSelectedTiles();\n        document.activeElement.blur();\n      },\n\n      _setSelectedTiles: function() {\n        // Update selected tile display only\n        let selectedIndices = this.selectedIndices;\n        this.allTiles.forEach(function(tile) {\n          let selected = selectedIndices.indexOf(tile.index) >= 0;\n          if (selected) {\n            tile.tile.addClass('selected');\n          } else {\n            tile.tile.removeClass('selected');\n          }\n        })\n      },\n\n      _getSelectedWells: function() {\n        return this.selectedIndices.map(function(index) {\n          let well = this.engine.derivative[index];\n          if (!well) {\n            well = this.defaultWell;\n          }\n          return well;\n        }, this);\n      },\n\n      containsObject: function(obj, list) {\n        function deepEqual (x, y) {\n          if (x === y) {\n            return true;\n          } else if ((typeof x == \"object\" && x != null) && (typeof y == \"object\" && y != null)) {\n            if (Object.keys(x).length !== Object.keys(y).length) {\n              return false;\n            }\n            for (let prop in x) {\n              if (x.hasOwnProperty(prop)) {\n                if (y.hasOwnProperty(prop)) {\n                  if (!deepEqual(x[prop], y[prop])) {\n                    return false;\n                  }\n                } else {\n                  return false;\n                }\n              }\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }\n\n        if (list) {\n          for (let i = 0; i < list.length; i++) {\n            if (deepEqual(obj, list[i])) {\n              return true;\n            }\n          }\n        }\n        return false;\n      },\n\n      _buildCommonData: function(commonData, obj, field) {\n        let commonVal = commonData[field];\n        if (commonVal === undefined) {\n          commonVal = null;\n        }\n        let objVal = obj[field];\n        if (objVal === undefined) {\n          objVal = null;\n        }\n\n        if (Array.isArray(commonVal)) {\n          let commonArr = [];\n          for (let i = 0; i < commonVal.length; i++) {\n            let v = commonVal[i];\n            // for multiplex field\n            if (v && typeof (v) === \"object\") {\n              for (let j = 0; j < objVal.length; j++) {\n                let v2 = objVal[j];\n                if (v[field] == v2[field]) {\n                  v = $.extend(true, {}, v);\n                  for (let oField in v) {\n                    this._buildCommonData(v, v2, oField);\n                  }\n                  commonArr.push(v)\n                }\n              }\n              // if (this.containsObject(v, objVal)) {\n              //   commonArr.push(v);\n              // }\n            } else {\n              if ($.inArray(v, objVal) >= 0) {\n                commonArr.push(v);\n              }\n            }\n          }\n          commonData[field] = commonArr;\n        } else {\n          if (objVal && typeof (objVal) === \"object\" && commonVal && typeof (commonVal) === \"object\") {\n            if ((objVal.value !== commonVal.value) || (objVal.unit !== commonVal.unit)) {\n              delete commonData[field];\n            }\n          } else if (commonVal !== objVal) {\n            delete commonData[field];\n          }\n        }\n      },\n\n      _getCommonData: function(wells) {\n        let commonData = null;\n        for (let i = 0; i < wells.length; i++) {\n          let well = wells[i];\n          if (well == null) {\n            continue;\n          }\n          if (commonData == null) {\n            commonData = $.extend(true, {}, wells[0]);\n            continue\n          }\n          for (let field in commonData) {\n            if (!commonData.hasOwnProperty(field)) {\n              continue;\n            }\n            this._buildCommonData(commonData, well, field);\n          }\n        }\n        return commonData || this.defaultWell;\n      },\n\n      _getCommonWell: function (wells) {\n        let commonData = this._getCommonData(wells);\n        return this.sanitizeWell(commonData);\n      },\n\n      _getAllMultipleVal: function(wells) {\n        let multipleFieldList = this.multipleFieldList;\n        let that = this;\n\n        multipleFieldList.forEach(function(multiplexField) {\n          if (wells.length) {\n            let curMultipleVal = {};\n            let multiData = null;\n            wells.forEach(function(well) {\n              if (well == null) {\n                return;\n              }\n              let id = multiplexField.id;\n              let wellFieldVals = well[id];\n              if (wellFieldVals && wellFieldVals.length) {\n                wellFieldVals.forEach(function(multipleVal) {\n                  if (typeof (multipleVal) === 'object') {\n                    if (multiData == null) {\n                      multiData = $.extend(true, {}, multipleVal);\n                    } else {\n                      for (let oField in multiData) {\n                        that._buildCommonData(multiData, multipleVal, oField);\n                      }\n                    }\n                    if (multipleVal[id] in curMultipleVal) {\n                      curMultipleVal[multipleVal[id]]++;\n                    } else {\n                      curMultipleVal[multipleVal[id]] = 1;\n                    }\n                  } else {\n                    if (multipleVal in curMultipleVal) {\n                      curMultipleVal[multipleVal]++;\n                    } else {\n                      curMultipleVal[multipleVal] = 1;\n                    }\n                  }\n                })\n              }\n            });\n            multiplexField.allSelectedMultipleData = multiData || {};\n            multiplexField.allSelectedMultipleVal = curMultipleVal;\n          } else {\n            multiplexField.allSelectedMultipleData = null;\n            multiplexField.allSelectedMultipleVal = null\n          }\n        });\n      },\n\n      decideSelectedFields: function() {\n        let wells = this._getSelectedWells();\n        this._getAllMultipleVal(wells);\n        this.applyFieldWarning(wells);\n        let well = this._getCommonWell(wells);\n        this._addDataToTabFields(well);\n      },\n\n      // get all wells that have data\n      getWellSetAddressWithData: function() {\n        let indices = Object.keys(this.engine.derivative).map(Number).sort();\n        return indices.map(this.indexToAddress, this)\n      }\n\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.tabs = function() {\n    // Tabs create and manage tabs at the right side of widget.\n    return {\n\n      allTabs: [],\n\n      defaultWell: {},\n\n      allDataTabs: [], // To hold all the tab contents. this contains all the tabs and its elements and elements\n      // Settings as a whole. its very useful, when we have units for a specific field.\n      // it goes like tabs-> individual field-> units and checkbox\n\n      _createTabAtRight: function() {\n        this.tabContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-container\");\n        $(this.topRight).append(this.tabContainer);\n      },\n\n      _createTabs: function() {\n        // this could be done using z-index. just imagine few cards stacked up.\n        // Check if options has tab data.\n        // Originally we will be pulling tab data from developer.\n        // Now we are building upon dummy data.\n        this.tabHead = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-head\");\n        $(this.tabContainer).append(this.tabHead);\n\n        let tabData = this.options.attributes.tabs;\n        let that = this;\n\n        tabData.forEach(function(tab, tabIndex) {\n          that.allTabs[tabIndex] = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab\");\n          $(that.allTabs[tabIndex]).data(\"index\", tabIndex)\n            .text(tab.name);\n\n          $(that.allTabs[tabIndex]).click(function() {\n            that._tabClickHandler(this);\n          });\n\n          $(that.tabHead).append(that.allTabs[tabIndex]);\n        });\n\n        this.tabDataContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-data-container\");\n        $(this.tabContainer).append(this.tabDataContainer);\n\n        this._addDataTabs(tabData);\n\n        $(this.allTabs[0]).click();\n\n        this._addTabData();\n      },\n\n      _tabClickHandler: function(clickedTab) {\n\n        if (this.selectedTab) {\n          $(this.selectedTab).removeClass(\"plate-setup-tab-selected\")\n            .addClass(\"plate-setup-tab\");\n\n          let previouslyClickedTabIndex = $(this.selectedTab).data(\"index\");\n          $(this.allDataTabs[previouslyClickedTabIndex]).css(\"z-index\", 0);\n          this.readOnlyHandler();\n        }\n\n        $(clickedTab).addClass(\"plate-setup-tab-selected\");\n\n        this.selectedTab = clickedTab;\n\n        let clickedTabIndex = $(clickedTab).data(\"index\");\n        $(this.allDataTabs[clickedTabIndex]).css(\"z-index\", 1000);\n      },\n\n      _addDataTabs: function(tabs) {\n        this.allDataTabs = tabs.map(function () {\n          return this._createElement(\"<div></div>\").addClass(\"plate-setup-data-div\").css(\"z-index\", 0);\n        }, this);\n        $(this.tabDataContainer).append(this.allDataTabs);\n      }\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.undoRedoManager = function() {\n\n    return {\n\n      undoRedoArray: [],\n\n      actionPointer: null,\n\n      addToUndoRedo: function() {\n        let state = this.createState();\n        if (this.actionPointer != null) {\n          let i = this.actionPointer + 1;\n          if (i < this.undoRedoArray.length) {\n            this.undoRedoArray.splice(i, this.undoRedoArray.length - i);\n          }\n        }\n        this.actionPointer = null;\n        this.undoRedoArray.push(state);\n      },\n\n      _configureUndoRedoArray: function() {\n\n        let data = {\n          checkboxes: [],\n          derivative: {},\n          selectedIndices: [0]\n        };\n\n        this.undoRedoArray = [];\n        this.actionPointer = null;\n        this.undoRedoArray.push($.extend({}, data));\n      },\n\n      clearHistory: function () {\n        this.undoRedoArray = this.undoRedoArray.slice(-1);\n        this.actionPointer = null;\n      },\n\n      undo: function() {\n        console.log(\"undo\");\n        return this.shiftUndoRedo(-1);\n      },\n\n      redo: function() {\n        console.log(\"redo\");\n        return this.shiftUndoRedo(1);\n      },\n\n      shiftUndoRedo: function(pointerDiff) {\n        let pointer = this.actionPointer;\n        if (pointer == null) {\n          pointer = this.undoRedoArray.length - 1;\n        }\n        pointer += pointerDiff;\n        return this.setUndoRedo(pointer);\n      },\n\n      setUndoRedo: function(pointer) {\n        if (pointer < 0) {\n          return false;\n        }\n        if (pointer >= this.undoRedoArray.length) {\n          return false;\n        }\n        this.actionPointer = pointer;\n        this.setData(this.undoRedoArray[pointer], true);\n        return true;\n      }\n    }\n  };\n\n})(jQuery);"]}